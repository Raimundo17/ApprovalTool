@page "/investments/delete/{Id:int}"

<br />

<h3>Are you sure you want to delete this investment?</h3>

<br />

<div class="table-responsive">
    <table class="table table-bordered p-0" id="dataTable" width="100%" cellspacing="0">
        <thead style="text-align:center">
            <tr>
                <th>Issue Date</th>
                <th>Ar Number</th>
                <th>IR / DRNumber</th>
                <th>Project Type</th>
                <th>Project Title</th>
                <th>Country</th>
                <th>Plant</th>
                <th>IR/DR (€)</th>
                <th>IR/DR ($)</th>
                <th>Doc Type</th>
                <th>Requester Comments</th>
                <th>Status</th>
                <th>Process Level</th>
            </tr>
        </thead>
        <tbody>
            @{

                <tr style="text-align:center">
                    <td>@investments.IssueDate</td>
                    <td>@investments.ArNumber</td>
                    <td>@investments.IR_DRNumber</td>
                    <td>@investments?.ProjectType?.Description</td>
                    <td>@investments?.ProjectTitle_DisposalDescription</td>
                    <td>@investments?.Country?.CountryName</td>
                    <td>@investments?.Plant?.PlantName</td>
                    <td>@investments.IRValueEuro</td>
                    <td>@investments.IRValueDollar</td>
                    <td>@investments?.DocType?.Description</td>
                    <td>@investments.Comments</td>
                    <td>@investments?.Status?.StatusDesignation</td>
                    <td>@investments?.ProcessLevel?.Description</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="form-group">
    <input type="submit" value="Delete" @onclick="(async () => await RemoveInvestment(investments))" class="btn btn-danger" />
    <input type="submit" value="Cancel" @onclick="(() => Cancel())" class="btn btn-warning" />
</div>
<br />
@code {
    [Parameter]
    public int Id { get; set; }
    Investments investments = new Investments();
    [CascadingParameter]
    private User currentUser { get; set; }
    protected User requester { get; set; }
    protected User approver { get; set; }
    protected User admin { get; set; }
    protected List<string> emailList = new List<string>();
    public string toCC { get; set; }
    protected Comment approvercomment = new Comment();
    protected List<User> requestersList = new();
    protected List<string> requesterList = new();
    protected List<string> aprover7list = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        // Só os requesters podem aceder
        if (currentUser.RoleId == 2)
        {
            investments = await investmentServices.GetById(Id);
        }
        else
        {
            _navigationManager.NavigateTo("/");
            return;
        }
    }
    protected async Task RemoveInvestment(Investments investments)
    {
        if (investments.StatusId != 1)
        {
            switch (investments.ProcessLevelId)
            {
                case 3: // PLANT ME MANAGER

                    approver = await userService.GetUserByLevelAndPlant(investments.ProcessLevelId, investments.PlantId);

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }
                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 4: // CLUSTER ME MANAGER

                    approver = await userService.GetUserByLevelAndPlant(investments.ProcessLevelId, investments.PlantId);

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }
                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 5: // PLANT FINANCE

                    approver = await userService.GetUserByLevelAndPlant(investments.ProcessLevelId, investments.PlantId);

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 6: // PLANT GENERAL MANAGEMENT

                    approver = await userService.GetUserByLevelAndPlant(investments.ProcessLevelId, investments.PlantId);

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }
                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 7: // MEC CAPITAL TEAM

                    List<User> approver7list = new List<User>();
                    approver7list = await userService.GetLevelByIdList(investments.ProcessLevelId);
                    foreach (var email7 in approver7list)
                    {
                        string seven = email7.Email;
                        aprover7list.Add(seven);
                    }

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, aprover7list, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 8: // PROGRAM MANAGER

                    approver = await userService.GetbyId(investments.ProgramManagerId.Value);

                    approver7list = await userService.GetLevelByIdList(7);
                    foreach (var email7 in approver7list)
                    {
                        string seven = email7.Email;
                        emailList.Add(seven);
                    }

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }
                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 9: // CAPITAL MANAGER

                    approver = await userService.GetUserByLevel(investments.ProcessLevelId);

                    approver7list = await userService.GetLevelByIdList(7);
                    foreach (var email7 in approver7list)
                    {
                        string seven = email7.Email;
                        emailList.Add(seven);
                    }

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }

                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 10: // ADVANCE MANAGER

                    approver = await userService.GetUserByLevel(investments.ProcessLevelId);

                    approver7list = await userService.GetLevelByIdList(7);
                    foreach (var email7 in approver7list)
                    {
                        string seven = email7.Email;
                        emailList.Add(seven);
                    }
                    User approver9 = await userService.GetUserByLevel(9);

                    emailList.Add(approver9.Email);

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }

                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 11: // ME DIRECTOR

                    approver = await userService.GetUserByLevel(investments.ProcessLevelId);

                    approver7list = await userService.GetLevelByIdList(7);
                    foreach (var email7 in approver7list)
                    {
                        string seven = email7.Email;
                        emailList.Add(seven);
                    }
                    approver9 = await userService.GetUserByLevel(9);

                    emailList.Add(approver9.Email);

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }

                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 12: // KRAKOW FINANCE LEADER

                    approver = await userService.GetUserByLevel(investments.ProcessLevelId);

                    approver7list = await userService.GetLevelByIdList(7);
                    foreach (var email7 in approver7list)
                    {
                        string seven = email7.Email;
                        emailList.Add(seven);
                    }
                    approver9 = await userService.GetUserByLevel(9);

                    emailList.Add(approver9.Email);

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }

                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 13: // REGIONAL PBU FINANCE DIRECTOR

                    approver = await userService.GetUserByLevel(investments.ProcessLevelId);

                    approver7list = await userService.GetLevelByIdList(7);
                    foreach (var email7 in approver7list)
                    {
                        string seven = email7.Email;
                        emailList.Add(seven);
                    }
                    approver9 = await userService.GetUserByLevel(9);
                    User approver12 = await userService.GetUserByLevel(12);

                    emailList.Add(approver9.Email);
                    emailList.Add(approver12.Email);

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }

                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 14: // REGIONAL PBU MANAGING DIRECTOR

                    approver = await userService.GetUserByLevel(investments.ProcessLevelId);

                    approver7list = await userService.GetLevelByIdList(7);
                    foreach (var email7 in approver7list)
                    {
                        string seven = email7.Email;
                        emailList.Add(seven);
                    }
                    approver9 = await userService.GetUserByLevel(9);
                    approver12 = await userService.GetUserByLevel(12);

                    emailList.Add(approver9.Email);
                    emailList.Add(approver12.Email);

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }

                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;

                case 15: // KRAKOW FINANCE TEAM

                    approver = await userService.GetUserByLevel(investments.ProcessLevelId);

                    approver7list = await userService.GetLevelByIdList(7);
                    foreach (var email7 in approver7list)
                    {
                        string seven = email7.Email;
                        emailList.Add(seven);
                    }
                    approver9 = await userService.GetUserByLevel(9);
                    approver12 = await userService.GetUserByLevel(12);

                    emailList.Add(approver9.Email);
                    emailList.Add(approver12.Email);

                    requestersList = await userService.GetUserByLevelAndPlantList(2, investments.PlantId);

                    foreach (var requester in requestersList)
                    {
                        string email = requester.Email;
                        requesterList.Add(email);
                    }

                    emailList.Add(approver.Email);

                    try
                    {
                        // Email Service
                        await MailService.SentForDeleteList(requesterList, emailList, investments);
                    }
                    catch (Exception)
                    {
                        await JsRuntime.InvokeVoidAsync("alert", "The investment was canceled but the email notification was not sent!");
                    }

                    break;
            }
        }

        else if (investments.StatusId == 1) // Se for um draft apaga diretamente
        {
            if (investments.Investment_Form != null)
            {
                File.Delete(investments.Investment_Form);
            }
            if (investments.Disposal_Form != null)
            {
                File.Delete(investments.Disposal_Form);
            }
            if (investments.MSD != null)
            {
                File.Delete(investments.MSD);
            }
            if (investments.Exception_Letter != null)
            {
                File.Delete(investments.Exception_Letter);
            }
            if (investments.ECCLS != null)
            {
                File.Delete(investments.ECCLS);
            }
            if (investments.RebillPOSalesConfirmation != null)
            {
                File.Delete(investments.RebillPOSalesConfirmation);
            }
            if (investments.Others != null)
            {
                File.Delete(investments.Others);
            }
            if (investments.ReleasedDocument != null)
            {
                File.Delete(investments.ReleasedDocument);
            }

            investmentServices.Delete(investments);
        }

        investments.StatusId = 4;

        investmentServices.Update(investments);

        await JsRuntime.InvokeVoidAsync("alert", "This investment was successfully deleted");

        _navigationManager.NavigateTo("/");

    }

    void Cancel()
    {
        _navigationManager.NavigateTo("/");
    }
}
