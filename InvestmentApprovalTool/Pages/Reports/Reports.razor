@page "/Reports"

<div class="row mt-3 m-0 d-flex">
    <div class="col-md-8 d-flex align-items-center">

        <span class="bi bi-filter"></span>
        <span class="px-1">Filter</span>

        <div class="input-group-prepend" style="margin-right:10px">
            <select class="btn btn-outline-secondary dropdown-toggle" disabled="@isSelectDisabled" name="Year" @onchange="SelectYear">
                <option style="text-align" value="select">Select a year</option>
                <option style="text-align" value="2023">2023</option>
                <option style="text-align" value="2024">2024</option>
            </select>

        </div>

        <div class="input-group-prepend" style="margin-right:10px">
            <select class="btn btn-outline-secondary dropdown-toggle" disabled="@isSelectDisabled" @onchange="SelectApprover">
                @foreach (var role in roles)
                {
                    <option value="@role.Id">@role.Description</option>
                }
            </select>
        </div>

        <div class="input-group-prepend" style="margin-right:10px">
            <select class="btn btn-outline-secondary dropdown-toggle" disabled="@isSelectDisabled" @onchange="SelectCountry">
                @foreach (var country in countries)
                {
                    <option value="@country.Id">@country.CountryName</option>
                }
            </select>
        </div>

        @if (selectedPressed == false)
        {
            <input type="submit" style="margin-right:10px" class="btn btn-success" @onclick="() => Selection(selectedApprover, selectedCountry)" value="Apply" />
        }

        @if (selectedPressed == true)
        {
            <input type="submit" style="margin-right:10px" class="btn btn-warning" @onclick="() => Reset()" value="Reset" />
        }

        <input type="submit" style="margin-right:10px" class="btn btn-primary" @onclick="() => GetTotalInvestmentsByMonth(selectedYear,selectedCountry)" value="Total of Investments" />

        <input type="submit" style="margin-right:10px" class="btn btn-secondary" @onclick="() => GetTotalInvestmentsByMonthCancelled(selectedYear,selectedCountry)" value="Investments Cancelled" />

        <input type="submit" style="margin-right:10px" class="btn btn-info" @onclick="() => GetTotalInvestmentsByMonthReleased(selectedYear, selectedCountry)" value="Investments Released" />

    </div>
</div>

@if (getTotalInvestmentsByMonth == true)
{
    <br />

    if (selectedCountry != null)
    {
        <h2>Total of investments per month </h2>
    }
    else
    {
        <h2>Total of investments per month </h2>
    }

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Total of Investments" LineType="LineType.Solid" Data="@Investments.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
        </RadzenValueAxis>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Investments" />
        </RadzenValueAxis>
    </RadzenChart>

    <br />

    if (selectedCountry == 0)
    {
        <h4>Total of Investments this year : @totalofinvestments</h4>
    }

}

@if (investmentsCancelled == true)
{
    <br />

    <h2>Total of investments cancelled per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Total of Investments Cancelled" LineType="LineType.Dashed" Data="@InvestmentsCancelled.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Investments" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (investmentsReleased == true)
{
    <br />

    <h2>Total of investments released per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Total of Investments released" LineType="LineType.Dashed" Data="@InvestmentsReleased.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Investments" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 0 && selectedPressed == true && totalpressed == false)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Complete Process" LineType="LineType.Dashed" Data="@globalEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>

    <br />

    <h4>Average approval time of this year in days : @yearaverage</h4>
}

@if (selectedApprover == 3 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Plant ME" LineType="LineType.Dashed" Data="@plantmeEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 4 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Cluster ME" LineType="LineType.Dashed" Data="@clustermeEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 5 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Plant Finance" LineType="LineType.Dashed" Data="@plantfinanceEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 6 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Plant General Management" LineType="LineType.Dashed" Data="@plantgeneralmanagementEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 7 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="MEC Capital Team" LineType="LineType.Dashed" Data="@mecEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 8 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Program Manager" LineType="LineType.Dashed" Data="@programmanagerEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 9 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Capital Manager" LineType="LineType.Dashed" Data="@capitalmanagerEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 10 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Advance Manager" LineType="LineType.Dashed" Data="@advancemanagerEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 11 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="ME Director" LineType="LineType.Dashed" Data="@medirectorEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 12 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Krakow Finance Leader" LineType="LineType.Dashed" Data="@krakowfinanceleaderEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 13 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Regional PBU Finance Director" LineType="LineType.Dashed" Data="@regionalfinancedirectorEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 14 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Regional PBU Managing Director" LineType="LineType.Dashed" Data="@regionalmanagingdirectorEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

@if (selectedApprover == 15 && selectedPressed == true)
{
    <br />

    <h2>Average of days for approval per month </h2>

    <RadzenChart ColorScheme="ColorScheme.Palette">
        <RadzenColumnSeries title="Krakow Finance Team" LineType="LineType.Dashed" Data="@krakowfinanceteamEfficiency.Select(kv => new { Month = kv.Key, Value = kv.Value })" CategoryProperty="Month" ValueProperty="Value">
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Days" />
        </RadzenValueAxis>
    </RadzenChart>
}

<br />

@if (selectedApprover == 0 && selectedPressed == true && totalpressed == false)
{
    <table style="font-family: Arial, Helvetica, sans-serif;
  border-collapse: collapse;
  width: 100%">
        <tr>
            <th style="border: 1px solid #ddd;
  padding: 8px">Approver</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">January</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">February</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">March</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">April</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">May</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">June</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">July</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">August</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">September</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">October</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">November</th>
            <th style="border: 1px solid #ddd;
  padding: 8px">December</th>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                PlantMe
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmeTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                ClusterMe
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @clustermeTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                Plant Finance
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantfinanceTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                Plant General Management
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @plantmanagementTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                MEC Capital Team
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @mecTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                Program Manager
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @pmTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                Capital Manager
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @capitalTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                Advance Manager
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @advanceTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                ME Director
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @medirectorTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                Krakow Finance Leader
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowleaderTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                Regional Finance Director
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableMay
            </td>
            <td>@financedirectorTableJune</td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @financedirectorTableDecember
            </td>
        </tr>
        <tr style="border:thin">
            <td style="border: 1px solid #ddd;
  padding: 8px">
                Regional Managing Director
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @managingdirectorTableDecember
            </td>
        </tr>
        <tr>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                Krakow Finance Team
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableJanuary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableFebruary
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableMarch
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableApril
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableMay
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableJune
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableJuly
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableAugust
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableSeptember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableOctober
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableNovember
            </td>
            <td style="border: 1px solid #ddd;
  padding: 8px">
                @krakowteamTableDecember
            </td>
        </tr>
    </table>

}

@code {

    public bool IsLoading { get; set; }

    protected List<Role> roles = new List<Role>();
    protected List<Country> countries = new List<Country>();

    private int selectedApprover;
    private int selectedCountry;
    // private int selectedYear = DateTime.Today.Year;
    private int selectedYear = 0;
    public bool getTotalInvestmentsByMonth { get; set; }
    public bool investmentsCancelled { get; set; }
    public bool investmentsReleased { get; set; }
    public bool selectedPressed { get; set; }
    public bool isSelectDisabled { get; set; }
    public int totalofinvestments { get; set; }
    public bool totalpressed { get; set; }
    public double yearaverage;

    double GlobalEfficiencyJanuary;
    double GlobalEfficiencyFebruary;
    double GlobalEfficiencyMarch;
    double GlobalEfficiencyApril;
    double GlobalEfficiencyMay;
    double GlobalEfficiencyJune;
    double GlobalEfficiencyJuly;
    double GlobalEfficiencyAugust;
    double GlobalEfficiencySeptember;
    double GlobalEfficiencyOctober;
    double GlobalEfficiencyNovember;
    double GlobalEfficiencyDecember;

    double plantmeTableJanuary;
    double plantmeTableFebruary;
    double plantmeTableMarch;
    double plantmeTableApril;
    double plantmeTableMay;
    double plantmeTableJune;
    double plantmeTableJuly;
    double plantmeTableAugust;
    double plantmeTableSeptember;
    double plantmeTableOctober;
    double plantmeTableNovember;
    double plantmeTableDecember;

    double clustermeTableJanuary;
    double clustermeTableFebruary;
    double clustermeTableMarch;
    double clustermeTableApril;
    double clustermeTableMay;
    double clustermeTableJune;
    double clustermeTableJuly;
    double clustermeTableAugust;
    double clustermeTableSeptember;
    double clustermeTableOctober;
    double clustermeTableNovember;
    double clustermeTableDecember;

    double plantfinanceTableJanuary;
    double plantfinanceTableFebruary;
    double plantfinanceTableMarch;
    double plantfinanceTableApril;
    double plantfinanceTableMay;
    double plantfinanceTableJune;
    double plantfinanceTableJuly;
    double plantfinanceTableAugust;
    double plantfinanceTableSeptember;
    double plantfinanceTableOctober;
    double plantfinanceTableNovember;
    double plantfinanceTableDecember;

    double plantmanagementTableJanuary;
    double plantmanagementTableFebruary;
    double plantmanagementTableMarch;
    double plantmanagementTableApril;
    double plantmanagementTableMay;
    double plantmanagementTableJune;
    double plantmanagementTableJuly;
    double plantmanagementTableAugust;
    double plantmanagementTableSeptember;
    double plantmanagementTableOctober;
    double plantmanagementTableNovember;
    double plantmanagementTableDecember;

    double mecTableJanuary;
    double mecTableFebruary;
    double mecTableMarch;
    double mecTableApril;
    double mecTableMay;
    double mecTableJune;
    double mecTableJuly;
    double mecTableAugust;
    double mecTableSeptember;
    double mecTableOctober;
    double mecTableNovember;
    double mecTableDecember;

    double pmTableJanuary;
    double pmTableFebruary;
    double pmTableMarch;
    double pmTableApril;
    double pmTableMay;
    double pmTableJune;
    double pmTableJuly;
    double pmTableAugust;
    double pmTableSeptember;
    double pmTableOctober;
    double pmTableNovember;
    double pmTableDecember;

    double capitalTableJanuary;
    double capitalTableFebruary;
    double capitalTableMarch;
    double capitalTableApril;
    double capitalTableMay;
    double capitalTableJune;
    double capitalTableJuly;
    double capitalTableAugust;
    double capitalTableSeptember;
    double capitalTableOctober;
    double capitalTableNovember;
    double capitalTableDecember;

    double advanceTableJanuary;
    double advanceTableFebruary;
    double advanceTableMarch;
    double advanceTableApril;
    double advanceTableMay;
    double advanceTableJune;
    double advanceTableJuly;
    double advanceTableAugust;
    double advanceTableSeptember;
    double advanceTableOctober;
    double advanceTableNovember;
    double advanceTableDecember;

    double medirectorTableJanuary;
    double medirectorTableFebruary;
    double medirectorTableMarch;
    double medirectorTableApril;
    double medirectorTableMay;
    double medirectorTableJune;
    double medirectorTableJuly;
    double medirectorTableAugust;
    double medirectorTableSeptember;
    double medirectorTableOctober;
    double medirectorTableNovember;
    double medirectorTableDecember;

    double krakowleaderTableJanuary;
    double krakowleaderTableFebruary;
    double krakowleaderTableMarch;
    double krakowleaderTableApril;
    double krakowleaderTableMay;
    double krakowleaderTableJune;
    double krakowleaderTableJuly;
    double krakowleaderTableAugust;
    double krakowleaderTableSeptember;
    double krakowleaderTableOctober;
    double krakowleaderTableNovember;
    double krakowleaderTableDecember;

    double financedirectorTableJanuary;
    double financedirectorTableFebruary;
    double financedirectorTableMarch;
    double financedirectorTableApril;
    double financedirectorTableMay;
    double financedirectorTableJune;
    double financedirectorTableJuly;
    double financedirectorTableAugust;
    double financedirectorTableSeptember;
    double financedirectorTableOctober;
    double financedirectorTableNovember;
    double financedirectorTableDecember;

    double managingdirectorTableJanuary;
    double managingdirectorTableFebruary;
    double managingdirectorTableMarch;
    double managingdirectorTableApril;
    double managingdirectorTableMay;
    double managingdirectorTableJune;
    double managingdirectorTableJuly;
    double managingdirectorTableAugust;
    double managingdirectorTableSeptember;
    double managingdirectorTableOctober;
    double managingdirectorTableNovember;
    double managingdirectorTableDecember;

    double krakowteamTableJanuary;
    double krakowteamTableFebruary;
    double krakowteamTableMarch;
    double krakowteamTableApril;
    double krakowteamTableMay;
    double krakowteamTableJune;
    double krakowteamTableJuly;
    double krakowteamTableAugust;
    double krakowteamTableSeptember;
    double krakowteamTableOctober;
    double krakowteamTableNovember;
    double krakowteamTableDecember;

    Dictionary<string, int> Investments;
    int receivedJanuary { get; set; }
    int receivedFebruary { get; set; }
    int receivedMarch { get; set; }
    int receivedApril { get; set; }
    int receivedMay { get; set; }
    int receivedJune { get; set; }
    int receivedJuly { get; set; }
    int receivedAugust { get; set; }
    int receivedSeptember { get; set; }
    int receivedOctober { get; set; }
    int receivedNovember { get; set; }
    int receivedDecember { get; set; }

    Dictionary<string, int> InvestmentsCancelled;
    int receivedbyMECJanuaryCancelled { get; set; }
    int receivedbyMECFebruaryCancelled { get; set; }
    int receivedbyMECMarchCancelled { get; set; }
    int receivedbyMECAprilCancelled { get; set; }
    int receivedbyMECMayCancelled { get; set; }
    int receivedbyMECJuneCancelled { get; set; }
    int receivedbyMECJulyCancelled { get; set; }
    int receivedbyMECAugustCancelled { get; set; }
    int receivedbyMECSeptemberCancelled { get; set; }
    int receivedbyMECOctoberCancelled { get; set; }
    int receivedbyMECNovemberCancelled { get; set; }
    int receivedbyMECDecemberCancelled { get; set; }

    Dictionary<string, int> InvestmentsReleased;
    int JanuaryReleased { get; set; }
    int FebruaryReleased { get; set; }
    int MarchReleased { get; set; }
    int AprilReleased { get; set; }
    int MayReleased { get; set; }
    int JuneReleased { get; set; }
    int JulyReleased { get; set; }
    int AugustReleased { get; set; }
    int SeptemberReleased { get; set; }
    int OctoberReleased { get; set; }
    int NovemberReleased { get; set; }
    int DecemberReleased { get; set; }

    Dictionary<string, double> globalEfficiency;
    double globalEfficiencyJanuaryAVG { get; set; }
    double globalEfficiencyFebruaryAVG { get; set; }
    double globalEfficiencyMarchAVG { get; set; }
    double globalEfficiencyAprilAVG { get; set; }
    double globalEfficiencyMayAVG { get; set; }
    double globalEfficiencyJuneAVG { get; set; }
    double globalEfficiencyJulyAVG { get; set; }
    double globalEfficiencyAugustAVG { get; set; }
    double globalEfficiencySeptemberAVG { get; set; }
    double globalEfficiencyOctoberAVG { get; set; }
    double globalEfficiencyNovemberAVG { get; set; }
    double globalEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> plantmeEfficiency;
    double plantmeEfficiencyJanuaryAVG { get; set; }
    double plantmeEfficiencyFebruaryAVG { get; set; }
    double plantmeEfficiencyMarchAVG { get; set; }
    double plantmeEfficiencyAprilAVG { get; set; }
    double plantmeEfficiencyMayAVG { get; set; }
    double plantmeEfficiencyJuneAVG { get; set; }
    double plantmeEfficiencyJulyAVG { get; set; }
    double plantmeEfficiencyAugustAVG { get; set; }
    double plantmeEfficiencySeptemberAVG { get; set; }
    double plantmeEfficiencyOctoberAVG { get; set; }
    double plantmeEfficiencyNovemberAVG { get; set; }
    double plantmeEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> clustermeEfficiency;
    double clustermeEfficiencyJanuaryAVG { get; set; }
    double clustermeEfficiencyFebruaryAVG { get; set; }
    double clustermeEfficiencyMarchAVG { get; set; }
    double clustermeEfficiencyAprilAVG { get; set; }
    double clustermeEfficiencyMayAVG { get; set; }
    double clustermeEfficiencyJuneAVG { get; set; }
    double clustermeEfficiencyJulyAVG { get; set; }
    double clustermeEfficiencyAugustAVG { get; set; }
    double clustermeEfficiencySeptemberAVG { get; set; }
    double clustermeEfficiencyOctoberAVG { get; set; }
    double clustermeEfficiencyNovemberAVG { get; set; }
    double clustermeEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> plantfinanceEfficiency;
    double plantfinanceEfficiencyJanuaryAVG { get; set; }
    double plantfinanceEfficiencyFebruaryAVG { get; set; }
    double plantfinanceEfficiencyMarchAVG { get; set; }
    double plantfinanceEfficiencyAprilAVG { get; set; }
    double plantfinanceEfficiencyMayAVG { get; set; }
    double plantfinanceEfficiencyJuneAVG { get; set; }
    double plantfinanceEfficiencyJulyAVG { get; set; }
    double plantfinanceEfficiencyAugustAVG { get; set; }
    double plantfinanceEfficiencySeptemberAVG { get; set; }
    double plantfinanceEfficiencyOctoberAVG { get; set; }
    double plantfinanceEfficiencyNovemberAVG { get; set; }
    double plantfinanceEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> plantgeneralmanagementEfficiency;
    double plantgeneralmanagementEfficiencyJanuaryAVG { get; set; }
    double plantgeneralmanagementEfficiencyFebruaryAVG { get; set; }
    double plantgeneralmanagementEfficiencyMarchAVG { get; set; }
    double plantgeneralmanagementEfficiencyAprilAVG { get; set; }
    double plantgeneralmanagementEfficiencyMayAVG { get; set; }
    double plantgeneralmanagementEfficiencyJuneAVG { get; set; }
    double plantgeneralmanagementEfficiencyJulyAVG { get; set; }
    double plantgeneralmanagementEfficiencyAugustAVG { get; set; }
    double plantgeneralmanagementEfficiencySeptemberAVG { get; set; }
    double plantgeneralmanagementEfficiencyOctoberAVG { get; set; }
    double plantgeneralmanagementEfficiencyNovemberAVG { get; set; }
    double plantgeneralmanagementEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> mecEfficiency;
    double mecEfficiencyJanuaryAVG { get; set; }
    double mecEfficiencyFebruaryAVG { get; set; }
    double mecEfficiencyMarchAVG { get; set; }
    double mecEfficiencyAprilAVG { get; set; }
    double mecEfficiencyMayAVG { get; set; }
    double mecEfficiencyJuneAVG { get; set; }
    double mecEfficiencyJulyAVG { get; set; }
    double mecEfficiencyAugustAVG { get; set; }
    double mecEfficiencySeptemberAVG { get; set; }
    double mecEfficiencyOctoberAVG { get; set; }
    double mecEfficiencyNovemberAVG { get; set; }
    double mecEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> programmanagerEfficiency;
    double programmanagerEfficiencyJanuaryAVG { get; set; }
    double programmanagerEfficiencyFebruaryAVG { get; set; }
    double programmanagerEfficiencyMarchAVG { get; set; }
    double programmanagerEfficiencyAprilAVG { get; set; }
    double programmanagerEfficiencyMayAVG { get; set; }
    double programmanagerEfficiencyJuneAVG { get; set; }
    double programmanagerEfficiencyJulyAVG { get; set; }
    double programmanagerEfficiencyAugustAVG { get; set; }
    double programmanagerEfficiencySeptemberAVG { get; set; }
    double programmanagerEfficiencyOctoberAVG { get; set; }
    double programmanagerEfficiencyNovemberAVG { get; set; }
    double programmanagerEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> capitalmanagerEfficiency;
    double capitalmanagerEfficiencyJanuaryAVG { get; set; }
    double capitalmanagerEfficiencyFebruaryAVG { get; set; }
    double capitalmanagerEfficiencyMarchAVG { get; set; }
    double capitalmanagerEfficiencyAprilAVG { get; set; }
    double capitalmanagerEfficiencyMayAVG { get; set; }
    double capitalmanagerEfficiencyJuneAVG { get; set; }
    double capitalmanagerEfficiencyJulyAVG { get; set; }
    double capitalmanagerEfficiencyAugustAVG { get; set; }
    double capitalmanagerEfficiencySeptemberAVG { get; set; }
    double capitalmanagerEfficiencyOctoberAVG { get; set; }
    double capitalmanagerEfficiencyNovemberAVG { get; set; }
    double capitalmanagerEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> advancemanagerEfficiency;
    double advancemanagerEfficiencyJanuaryAVG { get; set; }
    double advancemanagerEfficiencyFebruaryAVG { get; set; }
    double advancemanagerEfficiencyMarchAVG { get; set; }
    double advancemanagerEfficiencyAprilAVG { get; set; }
    double advancemanagerEfficiencyMayAVG { get; set; }
    double advancemanagerEfficiencyJuneAVG { get; set; }
    double advancemanagerEfficiencyJulyAVG { get; set; }
    double advancemanagerEfficiencyAugustAVG { get; set; }
    double advancemanagerEfficiencySeptemberAVG { get; set; }
    double advancemanagerEfficiencyOctoberAVG { get; set; }
    double advancemanagerEfficiencyNovemberAVG { get; set; }
    double advancemanagerEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> medirectorEfficiency;
    double medirectorEfficiencyJanuaryAVG { get; set; }
    double medirectorEfficiencyFebruaryAVG { get; set; }
    double medirectorEfficiencyMarchAVG { get; set; }
    double medirectorEfficiencyAprilAVG { get; set; }
    double medirectorEfficiencyMayAVG { get; set; }
    double medirectorEfficiencyJuneAVG { get; set; }
    double medirectorEfficiencyJulyAVG { get; set; }
    double medirectorEfficiencyAugustAVG { get; set; }
    double medirectorEfficiencySeptemberAVG { get; set; }
    double medirectorEfficiencyOctoberAVG { get; set; }
    double medirectorEfficiencyNovemberAVG { get; set; }
    double medirectorEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> krakowfinanceleaderEfficiency;
    double krakowfinanceleaderEfficiencyJanuaryAVG { get; set; }
    double krakowfinanceleaderEfficiencyFebruaryAVG { get; set; }
    double krakowfinanceleaderEfficiencyMarchAVG { get; set; }
    double krakowfinanceleaderEfficiencyAprilAVG { get; set; }
    double krakowfinanceleaderEfficiencyMayAVG { get; set; }
    double krakowfinanceleaderEfficiencyJuneAVG { get; set; }
    double krakowfinanceleaderEfficiencyJulyAVG { get; set; }
    double krakowfinanceleaderEfficiencyAugustAVG { get; set; }
    double krakowfinanceleaderEfficiencySeptemberAVG { get; set; }
    double krakowfinanceleaderEfficiencyOctoberAVG { get; set; }
    double krakowfinanceleaderEfficiencyNovemberAVG { get; set; }
    double krakowfinanceleaderEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> regionalfinancedirectorEfficiency;
    double regionalfinancedirectorEfficiencyJanuaryAVG { get; set; }
    double regionalfinancedirectorEfficiencyFebruaryAVG { get; set; }
    double regionalfinancedirectorEfficiencyMarchAVG { get; set; }
    double regionalfinancedirectorEfficiencyAprilAVG { get; set; }
    double regionalfinancedirectorEfficiencyMayAVG { get; set; }
    double regionalfinancedirectorEfficiencyJuneAVG { get; set; }
    double regionalfinancedirectorEfficiencyJulyAVG { get; set; }
    double regionalfinancedirectorEfficiencyAugustAVG { get; set; }
    double regionalfinancedirectorEfficiencySeptemberAVG { get; set; }
    double regionalfinancedirectorEfficiencyOctoberAVG { get; set; }
    double regionalfinancedirectorEfficiencyNovemberAVG { get; set; }
    double regionalfinancedirectorEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> regionalmanagingdirectorEfficiency;
    double regionalmanagingdirectorEfficiencyJanuaryAVG { get; set; }
    double regionalmanagingdirectorEfficiencyFebruaryAVG { get; set; }
    double regionalmanagingdirectorEfficiencyMarchAVG { get; set; }
    double regionalmanagingdirectorEfficiencyAprilAVG { get; set; }
    double regionalmanagingdirectorEfficiencyMayAVG { get; set; }
    double regionalmanagingdirectorEfficiencyJuneAVG { get; set; }
    double regionalmanagingdirectorEfficiencyJulyAVG { get; set; }
    double regionalmanagingdirectorEfficiencyAugustAVG { get; set; }
    double regionalmanagingdirectorEfficiencySeptemberAVG { get; set; }
    double regionalmanagingdirectorEfficiencyOctoberAVG { get; set; }
    double regionalmanagingdirectorEfficiencyNovemberAVG { get; set; }
    double regionalmanagingdirectorEfficiencyDecemberAVG { get; set; }

    Dictionary<string, double> krakowfinanceteamEfficiency;
    double krakowfinanceteamEfficiencyJanuaryAVG { get; set; }
    double krakowfinanceteamEfficiencyFebruaryAVG { get; set; }
    double krakowfinanceteamEfficiencyMarchAVG { get; set; }
    double krakowfinanceteamEfficiencyAprilAVG { get; set; }
    double krakowfinanceteamEfficiencyMayAVG { get; set; }
    double krakowfinanceteamEfficiencyJuneAVG { get; set; }
    double krakowfinanceteamEfficiencyJulyAVG { get; set; }
    double krakowfinanceteamEfficiencyAugustAVG { get; set; }
    double krakowfinanceteamEfficiencySeptemberAVG { get; set; }
    double krakowfinanceteamEfficiencyOctoberAVG { get; set; }
    double krakowfinanceteamEfficiencyNovemberAVG { get; set; }
    double krakowfinanceteamEfficiencyDecemberAVG { get; set; }

    List<InvestmentsHistory> totalinvestmentsByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsBySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> globalEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> globalEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> plantmeEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantmeEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> clustermeEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> clustermeEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> plantfinanceEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantfinanceEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> plantgeneralmanagementEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> plantgeneralmanagementEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> mecEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> mecEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> programmanagerEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> programmanagerEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> capitalmanagerEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> capitalmanagerEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> advancemanagerEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> advancemanagerEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> medirectorEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> medirectorEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> krakowfinanceleaderEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceleaderEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> regionalfinancedirectorEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalfinancedirectorEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> regionalmanagingdirectorEfficiencyDecember = new List<InvestmentsHistory>();

    List<InvestmentsHistory> krakowfinanceteamEfficiencyByMonth = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyJanuary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyFebruary = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyMarch = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyApril = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyMay = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyJune = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyJuly = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyAugust = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencySeptember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyOctober = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyNovember = new List<InvestmentsHistory>();
    List<InvestmentsHistory> krakowfinanceteamEfficiencyDecember = new List<InvestmentsHistory>();

    List<Investments> mectotalinvestmentsByMonthCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByJanuaryCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByFebruaryCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByMarchCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByAprilCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByMayCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByJuneCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByJulyCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByAugustCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsBySeptemberCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByOctoberCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByNovemberCanceled = new List<Investments>();
    List<Investments> mectotalinvestmentsByDecemberCanceled = new List<Investments>();

    List<InvestmentsHistory> totalinvestmentsByMonthReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByJanuaryReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByFebruaryReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByMarchReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByAprilReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByMayReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByJuneReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByJulyReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByAugustReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsBySeptemberReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByOctoberReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByNovemberReleased = new List<InvestmentsHistory>();
    List<InvestmentsHistory> totalinvestmentsByDecemberReleased = new List<InvestmentsHistory>();

    List<int?> average = new List<int?>();

    protected async override void OnInitialized()
    {

        Role role = new Role();

        roles = await roleServices.GetAll();
        roles.RemoveAt(0);
        roles.RemoveAt(0);
        role.Description = "ALL";
        roles.Insert(0, role);

        countries = await countryServices.GetAll();
        Country country = new Country();
        country.CountryName = "ALL";
        countries.Insert(0, country);

        Investments = new Dictionary<string, int>
        {
        { "January", receivedJanuary },
        { "February", receivedFebruary },
        { "March", receivedMarch },
        { "April", receivedApril },
        { "May", receivedMay },
        { "June", receivedJune },
        { "July", receivedJuly },
        { "August", receivedAugust },
        { "September", receivedSeptember },
        { "October", receivedOctober },
        { "November", receivedNovember },
        { "December", receivedDecember },
        };

        globalEfficiency = new Dictionary<string, double>
        {
        { "January", globalEfficiencyJanuaryAVG },
        { "February", globalEfficiencyFebruaryAVG },
        { "March", globalEfficiencyMarchAVG },
        { "April", globalEfficiencyAprilAVG },
        { "May", globalEfficiencyMayAVG },
        { "June", globalEfficiencyJuneAVG },
        { "July", globalEfficiencyJulyAVG },
        { "August", globalEfficiencyAugustAVG },
        { "September", globalEfficiencySeptemberAVG },
        { "October", globalEfficiencyOctoberAVG },
        { "November", globalEfficiencyNovemberAVG },
        { "December", globalEfficiencyDecemberAVG },
        };

        plantmeEfficiency = new Dictionary<string, double>
        {
        { "January", plantmeEfficiencyJanuaryAVG },
        { "February", plantmeEfficiencyFebruaryAVG },
        { "March", plantmeEfficiencyMarchAVG },
        { "April", plantmeEfficiencyAprilAVG },
        { "May", plantmeEfficiencyMayAVG },
        { "June", plantmeEfficiencyJuneAVG },
        { "July", plantmeEfficiencyJulyAVG },
        { "August", plantmeEfficiencyAugustAVG },
        { "September", plantmeEfficiencySeptemberAVG },
        { "October", plantmeEfficiencyOctoberAVG },
        { "November", plantmeEfficiencyNovemberAVG },
        { "December", plantmeEfficiencyDecemberAVG },
        };

        clustermeEfficiency = new Dictionary<string, double>
        {
        { "January", clustermeEfficiencyJanuaryAVG },
        { "February", clustermeEfficiencyFebruaryAVG },
        { "March", clustermeEfficiencyMarchAVG },
        { "April", clustermeEfficiencyAprilAVG },
        { "May", clustermeEfficiencyMayAVG },
        { "June", clustermeEfficiencyJuneAVG },
        { "July", clustermeEfficiencyJulyAVG },
        { "August", clustermeEfficiencyAugustAVG },
        { "September", clustermeEfficiencySeptemberAVG },
        { "October", clustermeEfficiencyOctoberAVG },
        { "November", clustermeEfficiencyNovemberAVG },
        { "December", clustermeEfficiencyDecemberAVG },
        };

        plantfinanceEfficiency = new Dictionary<string, double>
        {
        { "January", plantfinanceEfficiencyJanuaryAVG },
        { "February", plantfinanceEfficiencyFebruaryAVG },
        { "March", plantfinanceEfficiencyMarchAVG },
        { "April", plantfinanceEfficiencyAprilAVG },
        { "May", plantfinanceEfficiencyMayAVG },
        { "June", plantfinanceEfficiencyJuneAVG },
        { "July", plantfinanceEfficiencyJulyAVG },
        { "August", plantfinanceEfficiencyAugustAVG },
        { "September", plantfinanceEfficiencySeptemberAVG },
        { "October", plantfinanceEfficiencyOctoberAVG },
        { "November", plantfinanceEfficiencyNovemberAVG },
        { "December", plantfinanceEfficiencyDecemberAVG },
        };

        plantgeneralmanagementEfficiency = new Dictionary<string, double>
        {
        { "January", plantgeneralmanagementEfficiencyJanuaryAVG },
        { "February", plantgeneralmanagementEfficiencyFebruaryAVG },
        { "March", plantgeneralmanagementEfficiencyMarchAVG },
        { "April", plantgeneralmanagementEfficiencyAprilAVG },
        { "May", plantgeneralmanagementEfficiencyMayAVG },
        { "June", plantgeneralmanagementEfficiencyJuneAVG },
        { "July", plantgeneralmanagementEfficiencyJulyAVG },
        { "August", plantgeneralmanagementEfficiencyAugustAVG },
        { "September", plantgeneralmanagementEfficiencySeptemberAVG },
        { "October", plantgeneralmanagementEfficiencyOctoberAVG },
        { "November", plantgeneralmanagementEfficiencyNovemberAVG },
        { "December", plantgeneralmanagementEfficiencyDecemberAVG },
        };

        mecEfficiency = new Dictionary<string, double>
        {
        { "January", mecEfficiencyJanuaryAVG },
        { "February", mecEfficiencyFebruaryAVG },
        { "March", mecEfficiencyMarchAVG },
        { "April", mecEfficiencyAprilAVG },
        { "May", mecEfficiencyMayAVG },
        { "June", mecEfficiencyJuneAVG },
        { "July", mecEfficiencyJulyAVG },
        { "August", mecEfficiencyAugustAVG },
        { "September", mecEfficiencySeptemberAVG },
        { "October", mecEfficiencyOctoberAVG },
        { "November", mecEfficiencyNovemberAVG },
        { "December", mecEfficiencyDecemberAVG },
        };

        programmanagerEfficiency = new Dictionary<string, double>
        {
        { "January", programmanagerEfficiencyJanuaryAVG },
        { "February", programmanagerEfficiencyFebruaryAVG },
        { "March", programmanagerEfficiencyMarchAVG },
        { "April", programmanagerEfficiencyAprilAVG },
        { "May", programmanagerEfficiencyMayAVG },
        { "June", programmanagerEfficiencyJuneAVG },
        { "July", programmanagerEfficiencyJulyAVG },
        { "August", programmanagerEfficiencyAugustAVG },
        { "September", programmanagerEfficiencySeptemberAVG },
        { "October", programmanagerEfficiencyOctoberAVG },
        { "November", programmanagerEfficiencyNovemberAVG },
        { "December", programmanagerEfficiencyDecemberAVG },
        };

        capitalmanagerEfficiency = new Dictionary<string, double>
        {
        { "January", capitalmanagerEfficiencyJanuaryAVG },
        { "February", capitalmanagerEfficiencyFebruaryAVG },
        { "March", capitalmanagerEfficiencyMarchAVG },
        { "April", capitalmanagerEfficiencyAprilAVG },
        { "May", capitalmanagerEfficiencyMayAVG },
        { "June", capitalmanagerEfficiencyJuneAVG },
        { "July", capitalmanagerEfficiencyJulyAVG },
        { "August", capitalmanagerEfficiencyAugustAVG },
        { "September", capitalmanagerEfficiencySeptemberAVG },
        { "October", capitalmanagerEfficiencyOctoberAVG },
        { "November", capitalmanagerEfficiencyNovemberAVG },
        { "December", capitalmanagerEfficiencyDecemberAVG },
        };

        advancemanagerEfficiency = new Dictionary<string, double>
        {
        { "January", advancemanagerEfficiencyJanuaryAVG },
        { "February", advancemanagerEfficiencyFebruaryAVG },
        { "March", advancemanagerEfficiencyMarchAVG },
        { "April", advancemanagerEfficiencyAprilAVG },
        { "May", advancemanagerEfficiencyMayAVG },
        { "June", advancemanagerEfficiencyJuneAVG },
        { "July", advancemanagerEfficiencyJulyAVG },
        { "August", advancemanagerEfficiencyAugustAVG },
        { "September", advancemanagerEfficiencySeptemberAVG },
        { "October", advancemanagerEfficiencyOctoberAVG },
        { "November", advancemanagerEfficiencyNovemberAVG },
        { "December", advancemanagerEfficiencyDecemberAVG },
        };

        medirectorEfficiency = new Dictionary<string, double>
        {
        { "January", medirectorEfficiencyJanuaryAVG },
        { "February", medirectorEfficiencyFebruaryAVG },
        { "March", medirectorEfficiencyMarchAVG },
        { "April", medirectorEfficiencyAprilAVG },
        { "May", medirectorEfficiencyMayAVG },
        { "June", medirectorEfficiencyJuneAVG },
        { "July", medirectorEfficiencyJulyAVG },
        { "August", medirectorEfficiencyAugustAVG },
        { "September", medirectorEfficiencySeptemberAVG },
        { "October", medirectorEfficiencyOctoberAVG },
        { "November", medirectorEfficiencyNovemberAVG },
        { "December", medirectorEfficiencyDecemberAVG },
        };

        krakowfinanceleaderEfficiency = new Dictionary<string, double>
        {
        { "January", krakowfinanceleaderEfficiencyJanuaryAVG },
        { "February", krakowfinanceleaderEfficiencyFebruaryAVG },
        { "March", krakowfinanceleaderEfficiencyMarchAVG },
        { "April", krakowfinanceleaderEfficiencyAprilAVG },
        { "May", krakowfinanceleaderEfficiencyMayAVG },
        { "June", krakowfinanceleaderEfficiencyJuneAVG },
        { "July", krakowfinanceleaderEfficiencyJulyAVG },
        { "August", krakowfinanceleaderEfficiencyAugustAVG },
        { "September", krakowfinanceleaderEfficiencySeptemberAVG },
        { "October", krakowfinanceleaderEfficiencyOctoberAVG },
        { "November", krakowfinanceleaderEfficiencyNovemberAVG },
        { "December", krakowfinanceleaderEfficiencyDecemberAVG },
        };

        regionalfinancedirectorEfficiency = new Dictionary<string, double>
        {
        { "January", regionalfinancedirectorEfficiencyJanuaryAVG },
        { "February", regionalfinancedirectorEfficiencyFebruaryAVG },
        { "March", regionalfinancedirectorEfficiencyMarchAVG },
        { "April", regionalfinancedirectorEfficiencyAprilAVG },
        { "May", regionalfinancedirectorEfficiencyMayAVG },
        { "June", regionalfinancedirectorEfficiencyJuneAVG },
        { "July", regionalfinancedirectorEfficiencyJulyAVG },
        { "August", regionalfinancedirectorEfficiencyAugustAVG },
        { "September", regionalfinancedirectorEfficiencySeptemberAVG },
        { "October", regionalfinancedirectorEfficiencyOctoberAVG },
        { "November", regionalfinancedirectorEfficiencyNovemberAVG },
        { "December", regionalfinancedirectorEfficiencyDecemberAVG },
        };

        regionalmanagingdirectorEfficiency = new Dictionary<string, double>
        {
        { "January", regionalmanagingdirectorEfficiencyJanuaryAVG },
        { "February", regionalmanagingdirectorEfficiencyFebruaryAVG },
        { "March", regionalmanagingdirectorEfficiencyMarchAVG },
        { "April", regionalmanagingdirectorEfficiencyAprilAVG },
        { "May", regionalmanagingdirectorEfficiencyMayAVG },
        { "June", regionalmanagingdirectorEfficiencyJuneAVG },
        { "July", regionalmanagingdirectorEfficiencyJulyAVG },
        { "August", regionalmanagingdirectorEfficiencyAugustAVG },
        { "September", regionalmanagingdirectorEfficiencySeptemberAVG },
        { "October", regionalmanagingdirectorEfficiencyOctoberAVG },
        { "November", regionalmanagingdirectorEfficiencyNovemberAVG },
        { "December", regionalmanagingdirectorEfficiencyDecemberAVG },
        };

        krakowfinanceteamEfficiency = new Dictionary<string, double>
        {
        { "January", krakowfinanceteamEfficiencyJanuaryAVG },
        { "February", krakowfinanceteamEfficiencyFebruaryAVG },
        { "March", krakowfinanceteamEfficiencyMarchAVG },
        { "April", krakowfinanceteamEfficiencyAprilAVG },
        { "May", krakowfinanceteamEfficiencyMayAVG },
        { "June", krakowfinanceteamEfficiencyJuneAVG },
        { "July", krakowfinanceteamEfficiencyJulyAVG },
        { "August", krakowfinanceteamEfficiencyAugustAVG },
        { "September", krakowfinanceteamEfficiencySeptemberAVG },
        { "October", krakowfinanceteamEfficiencyOctoberAVG },
        { "November", krakowfinanceteamEfficiencyNovemberAVG },
        { "December", krakowfinanceteamEfficiencyDecemberAVG },
        };


        InvestmentsCancelled = new Dictionary<string, int>
        {
        { "January", receivedbyMECJanuaryCancelled },
        { "February", receivedbyMECFebruaryCancelled },
        { "March", receivedbyMECMarchCancelled },
        { "April", receivedbyMECAprilCancelled },
        { "May", receivedbyMECMayCancelled },
        { "June", receivedbyMECJuneCancelled },
        { "July", receivedbyMECJulyCancelled },
        { "August", receivedbyMECAugustCancelled },
        { "September", receivedbyMECSeptemberCancelled },
        { "October", receivedbyMECOctoberCancelled },
        { "November", receivedbyMECNovemberCancelled },
        { "December", receivedbyMECDecemberCancelled },
        };

        InvestmentsReleased = new Dictionary<string, int>
        {
        { "January", JanuaryReleased },
        { "February", FebruaryReleased },
        { "March", MarchReleased },
        { "April", AprilReleased },
        { "May", MayReleased },
        { "June", JuneReleased },
        { "July", JulyReleased },
        { "August", AugustReleased },
        { "September", SeptemberReleased },
        { "October", OctoberReleased },
        { "November", NovemberReleased },
        { "December", DecemberReleased },
        };
    }

    private void AverageApprovalsTable(int year)
    {
        GetEfficiencyByMonthinplantME(selectedCountry, selectedYear);
        GetEfficiencyByMonthinclusterME(selectedCountry, selectedYear);
        GetEfficiencyByMonthinPlantFinance(selectedCountry, selectedYear);
        GetEfficiencyByMonthinPlantGeneralManagement(selectedCountry, selectedYear);
        GetEfficiencyByMonthinMEC(selectedCountry, selectedYear);
        GetEfficiencyByMonthinProgramManager(selectedCountry, selectedYear);
        GetEfficiencyByMonthinCapitalManager(selectedCountry, selectedYear);
        GetEfficiencyByMonthinAdvanceManager(selectedCountry, selectedYear);
        GetEfficiencyByMonthinMEDirector(selectedCountry, selectedYear);
        GetEfficiencyByMonthinKrakowFinanceLeader(selectedCountry, selectedYear);
        GetEfficiencyByMonthinRegionalFinanceDirector(selectedCountry, selectedYear);
        GetEfficiencyByMonthinRegionalManagingDirector(selectedCountry, selectedYear);
        GetEfficiencyByMonthinKrakowFinanceTeam(selectedCountry, selectedYear);
    }

    private void SelectYear(ChangeEventArgs e)
    {
        selectedYear = Convert.ToInt32(e.Value);
    }

    private void Reset()
    {
        selectedCountry = 0;
        selectedPressed = false;
        isSelectDisabled = false;
        _navigationManager.NavigateTo("/Reports", forceLoad: true);
    }

    private void Selection(int approver, int country)
    {
        selectedPressed = true;
        isSelectDisabled = true;

        switch (selectedApprover)
        {
            default:
                GetEfficiencyByMonthGlobal(selectedCountry, selectedYear);
                break;

            case 3:
                GetEfficiencyByMonthinplantME(selectedCountry, selectedYear);
                break;

            case 4:
                GetEfficiencyByMonthinclusterME(selectedCountry, selectedYear);
                break;

            case 5:
                GetEfficiencyByMonthinPlantFinance(selectedCountry, selectedYear);
                break;

            case 6:
                GetEfficiencyByMonthinPlantGeneralManagement(selectedCountry, selectedYear);
                break;

            case 7:
                GetEfficiencyByMonthinMEC(selectedCountry, selectedYear);
                break;

            case 8:
                GetEfficiencyByMonthinProgramManager(selectedCountry, selectedYear);
                break;

            case 9:
                GetEfficiencyByMonthinCapitalManager(selectedCountry, selectedYear);
                break;

            case 10:
                GetEfficiencyByMonthinAdvanceManager(selectedCountry, selectedYear);
                break;

            case 11:
                GetEfficiencyByMonthinMEDirector(selectedCountry, selectedYear);
                break;

            case 12:
                GetEfficiencyByMonthinKrakowFinanceLeader(selectedCountry, selectedYear);
                break;

            case 13:
                GetEfficiencyByMonthinRegionalFinanceDirector(selectedCountry, selectedYear);
                break;

            case 14:
                GetEfficiencyByMonthinRegionalManagingDirector(selectedCountry, selectedYear);
                break;

            case 15:
                GetEfficiencyByMonthinKrakowFinanceTeam(selectedCountry, selectedYear);
                break;
        }


    }

    private void SelectCountry(ChangeEventArgs e)
    {
        if (Convert.ToInt32(e.Value) != 0)
        {
            selectedCountry = Convert.ToInt32(e.Value);
        }
        else
        {
            selectedCountry = 0;
        }
    }

    private void SelectApprover(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            selectedApprover = Convert.ToInt32(e.Value);
        }
        else
        {
            selectedApprover = 0;
        }
    }

    // Get All investments with Approval history by month
    protected async Task GetTotalInvestmentsByMonth(int year, int selectedCountry)
    {
        selectedPressed = true;
        isSelectDisabled = true;
        totalpressed = true;

        getTotalInvestmentsByMonth = !getTotalInvestmentsByMonth;

        totalofinvestments = investmenthistoryService.GetAll().Result
    .Where(x => x.Investments?.StatusId != 1 && x.Investments.IssueDate.Value.Year == year)
    .ToList().Count();

        for (int month = 1; month <= 12; month++)
        {
            if (selectedCountry > 0)
            {
                totalinvestmentsByMonth = investmenthistoryService.GetAll().Result
    .Where(x => x.Investments?.IssueDate.Value.Month == month && x.Investments?.StatusId != 1 && x.Investments.IssueDate.Value.Year == year
    && x.Investments.CountryId == selectedCountry)
    .ToList();
            }
            else
            {
                totalinvestmentsByMonth = investmenthistoryService.GetAll().Result
    .Where(x => x.Investments?.IssueDate.Value.Month == month && x.Investments?.StatusId != 1 && x.Investments.IssueDate.Value.Year == year)
    .ToList();
            }

            if (month == 1)
            {
                totalinvestmentsByJanuary = totalinvestmentsByMonth;
                Investments["January"] = totalinvestmentsByJanuary.Count();
            }
            else if (month == 2)
            {
                totalinvestmentsByFebruary = totalinvestmentsByMonth;
                Investments["February"] = totalinvestmentsByFebruary.Count();
            }
            else if (month == 3)
            {
                totalinvestmentsByMarch = totalinvestmentsByMonth;
                Investments["March"] = totalinvestmentsByMarch.Count();
            }
            else if (month == 4)
            {
                totalinvestmentsByApril = totalinvestmentsByMonth;
                Investments["April"] = totalinvestmentsByApril.Count();
            }
            else if (month == 5)
            {
                totalinvestmentsByMay = totalinvestmentsByMonth;
                Investments["May"] = totalinvestmentsByMay.Count();
            }
            else if (month == 6)
            {
                totalinvestmentsByJune = totalinvestmentsByMonth;
                Investments["June"] = totalinvestmentsByJune.Count();
            }
            else if (month == 7)
            {
                totalinvestmentsByJuly = totalinvestmentsByMonth;
                Investments["July"] = totalinvestmentsByJuly.Count();
            }
            else if (month == 8)
            {
                totalinvestmentsByAugust = totalinvestmentsByMonth;
                Investments["August"] = totalinvestmentsByAugust.Count();
            }
            else if (month == 9)
            {
                totalinvestmentsBySeptember = totalinvestmentsByMonth;
                Investments["September"] = totalinvestmentsBySeptember.Count();
            }
            else if (month == 10)
            {
                totalinvestmentsByOctober = totalinvestmentsByMonth;
                Investments["October"] = totalinvestmentsByOctober.Count();
            }
            else if (month == 11)
            {
                totalinvestmentsByNovember = totalinvestmentsByMonth;
                Investments["November"] = totalinvestmentsByNovember.Count();
            }
            else if (month == 12)
            {
                totalinvestmentsByDecember = totalinvestmentsByMonth;
                Investments["December"] = totalinvestmentsByDecember.Count();
            }
        }
    }

    // Get All investments by month that were rejected
    protected async Task GetTotalInvestmentsByMonthCancelled(int year, int selectedCountry)
    {
        selectedPressed = true;
        isSelectDisabled = true;
        totalpressed = true;

        investmentsCancelled = !investmentsCancelled;

        for (int month = 1; month <= 12; month++)
        {
            if (selectedCountry > 0)
            {
                mectotalinvestmentsByMonthCanceled = investmentServices.GetAll()
       .Where(x => x.IssueDate?.Month == month && x.CountryId == selectedCountry && x.IssueDate.Value.Year == year && (x.StatusId == 4 || x.StatusId == 3)).ToList();
            }
            else
            {
                mectotalinvestmentsByMonthCanceled = investmentServices.GetAll()
                .Where(x => x.IssueDate?.Month == month && x.IssueDate.Value.Year == year && (x.StatusId == 4 || x.StatusId == 3)).ToList();
            }

            if (month == 1)
            {
                mectotalinvestmentsByJanuaryCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["January"] = mectotalinvestmentsByJanuaryCanceled.Count();
            }
            else if (month == 2)
            {
                mectotalinvestmentsByFebruaryCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["February"] = mectotalinvestmentsByFebruaryCanceled.Count();
            }
            else if (month == 3)
            {
                mectotalinvestmentsByMarchCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["March"] = mectotalinvestmentsByMarchCanceled.Count();
            }
            else if (month == 4)
            {
                mectotalinvestmentsByAprilCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["April"] = mectotalinvestmentsByAprilCanceled.Count();
            }
            else if (month == 5)
            {
                mectotalinvestmentsByMayCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["May"] = mectotalinvestmentsByMayCanceled.Count();
            }
            else if (month == 6)
            {
                mectotalinvestmentsByJuneCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["June"] = mectotalinvestmentsByJuneCanceled.Count();
            }
            else if (month == 7)
            {
                mectotalinvestmentsByJulyCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["July"] = mectotalinvestmentsByJulyCanceled.Count();
            }
            else if (month == 8)
            {
                mectotalinvestmentsByAugustCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["August"] = mectotalinvestmentsByAugustCanceled.Count();
            }
            else if (month == 9)
            {
                mectotalinvestmentsBySeptemberCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["September"] = mectotalinvestmentsBySeptemberCanceled.Count();
            }
            else if (month == 10)
            {
                mectotalinvestmentsByOctoberCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["October"] = mectotalinvestmentsByOctoberCanceled.Count();
            }
            else if (month == 11)
            {
                mectotalinvestmentsByNovemberCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["November"] = mectotalinvestmentsByNovemberCanceled.Count();
            }
            else if (month == 12)
            {
                mectotalinvestmentsByDecemberCanceled = mectotalinvestmentsByMonthCanceled;
                InvestmentsCancelled["December"] = mectotalinvestmentsByDecemberCanceled.Count();
            }
        }
    }

    // Get All investments by month that were released
    protected async Task GetTotalInvestmentsByMonthReleased(int year, int selectedCountry)
    {
        selectedPressed = true;
        isSelectDisabled = true;
        totalpressed = true;

        investmentsReleased = !investmentsReleased;

        for (int month = 1; month <= 12; month++)
        {
            if (selectedCountry > 0)
            {
                totalinvestmentsByMonthReleased = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate15.HasValue && x.Investments?.CountryId == selectedCountry && x.ProcesslevelDate15?.Month == month && x.ProcesslevelDate15?.Year == year).ToList();
            }
            else
            {
                totalinvestmentsByMonthReleased = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate15.HasValue && x.ProcesslevelDate15?.Month == month && x.ProcesslevelDate15?.Year == year).ToList();
            }

            if (month == 1)
            {
                totalinvestmentsByJanuaryReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["January"] = totalinvestmentsByJanuaryReleased.Count();
            }
            else if (month == 2)
            {
                totalinvestmentsByFebruaryReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["February"] = totalinvestmentsByFebruaryReleased.Count();
            }
            else if (month == 3)
            {
                totalinvestmentsByMarchReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["March"] = totalinvestmentsByMarchReleased.Count();
            }
            else if (month == 4)
            {
                totalinvestmentsByAprilReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["April"] = totalinvestmentsByAprilReleased.Count();
            }
            else if (month == 5)
            {
                totalinvestmentsByMayReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["May"] = totalinvestmentsByMayReleased.Count();
            }
            else if (month == 6)
            {
                totalinvestmentsByJuneReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["June"] = totalinvestmentsByJuneReleased.Count();
            }
            else if (month == 7)
            {
                totalinvestmentsByJulyReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["July"] = totalinvestmentsByJulyReleased.Count();
            }
            else if (month == 8)
            {
                totalinvestmentsByAugustReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["August"] = totalinvestmentsByAugustReleased.Count();
            }
            else if (month == 9)
            {
                totalinvestmentsBySeptemberReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["September"] = totalinvestmentsBySeptemberReleased.Count();
            }
            else if (month == 10)
            {
                totalinvestmentsByOctoberReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["October"] = totalinvestmentsByOctoberReleased.Count();
            }
            else if (month == 11)
            {
                totalinvestmentsByNovemberReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["November"] = totalinvestmentsByNovemberReleased.Count();
            }
            else if (month == 12)
            {
                totalinvestmentsByDecemberReleased = totalinvestmentsByMonthReleased;
                InvestmentsReleased["December"] = totalinvestmentsByDecemberReleased.Count();
            }
        }
    }

    // Get the leadtime/efficiency of Global by month
    protected async Task GetEfficiencyByMonthGlobal(int country, int year)
    {
        selectedPressed = true;
        isSelectDisabled = true;

        AverageApprovalsTable(year);

        for (int month = 1; month <= 12; month++)
        {
            globalEfficiencyByMonth.Clear();

            if (country > 0)
            {
                globalEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate15.HasValue && x.ProcesslevelDate15?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate15?.Year == year)
                .ToList();
            }
            else
            {
                globalEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate15.HasValue && x.ProcesslevelDate15?.Month == month && x.ProcesslevelDate15?.Year == year)
               .ToList();
            }

            if (month == 1 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyJanuary = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyJanuary)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyJanuary = (double)average.Sum() / average.Count();
                    globalEfficiency["January"] = Math.Round(GlobalEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyFebruary = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyFebruary)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyFebruary = (double)average.Sum() / average.Count();
                    globalEfficiency["February"] = Math.Round(GlobalEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyMarch = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyMarch)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyMarch = (double)average.Sum() / average.Count();
                    globalEfficiency["March"] = Math.Round(GlobalEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyApril = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyApril)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyApril = (double)average.Sum() / average.Count();
                    globalEfficiency["April"] = Math.Round(GlobalEfficiencyApril, 2);
                }
            }
            else if (month == 5 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyMay = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyMay)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyMay = (double)average.Sum() / average.Count();
                    globalEfficiency["May"] = Math.Round(GlobalEfficiencyMay, 2);
                }
            }
            else if (month == 6 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyJune = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyJune)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyJune = (double)average.Sum() / average.Count();
                    globalEfficiency["June"] = Math.Round(GlobalEfficiencyJune, 2);
                }
            }
            else if (month == 7 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyJuly = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyJuly)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyJuly = (double)average.Sum() / average.Count();
                    globalEfficiency["July"] = Math.Round(GlobalEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyAugust = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyAugust)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyAugust = (double)average.Sum() / average.Count();
                    globalEfficiency["August"] = Math.Round(GlobalEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencySeptember = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencySeptember)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencySeptember = (double)average.Sum() / average.Count();
                    globalEfficiency["September"] = Math.Round(GlobalEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyOctober = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyOctober)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyOctober = (double)average.Sum() / average.Count();
                    globalEfficiency["October"] = Math.Round(GlobalEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyNovember = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyNovember)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyNovember = (double)average.Sum() / average.Count();
                    globalEfficiency["November"] = Math.Round(GlobalEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && globalEfficiencyByMonth.Count() > 0)
            {
                globalEfficiencyDecember = globalEfficiencyByMonth;
                average.Clear();

                foreach (var data in globalEfficiencyDecember)
                {
                    if (data.Approval15 != null)
                    {
                        if (data.Approval15 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate15.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    GlobalEfficiencyDecember = (double)average.Sum() / average.Count();
                    globalEfficiency["December"] = Math.Round(GlobalEfficiencyDecember, 2);
                }
            }
        }

        yearaverage = (GlobalEfficiencyJanuary + GlobalEfficiencyFebruary + GlobalEfficiencyMarch + GlobalEfficiencyApril + GlobalEfficiencyMay + GlobalEfficiencyJune + GlobalEfficiencyJuly
        + GlobalEfficiencyAugust + GlobalEfficiencySeptember + GlobalEfficiencyOctober + GlobalEfficiencyNovember + GlobalEfficiencyDecember) / 12;
        yearaverage = Math.Round(yearaverage, 2);

    }

    // Get the leadtime/efficiency of Plant ME by month
    protected async Task GetEfficiencyByMonthinplantME(int country, int year)
    {
        for (int month = 1; month <= 12; month++)
        {
            plantmeEfficiencyByMonth.Clear();

            if (country > 0)
            {
                plantmeEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate3.HasValue && x.ProcesslevelDate3?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate3?.Year == year)
                .ToList();
            }
            else
            {
                plantmeEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate3.HasValue && x.ProcesslevelDate3?.Month == month && x.ProcesslevelDate3?.Year == year)
               .ToList();
            }


            if (month == 1 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyJanuary = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyJanuary)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyJanuary = (double)average.Sum() / average.Count();
                    plantmeEfficiency["January"] = Math.Round(PlantMeEfficiencyJanuary, 2);
                    plantmeTableJanuary = Math.Round(PlantMeEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyFebruary = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyFebruary)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyFebruary = (double)average.Sum() / average.Count();
                    plantmeEfficiency["February"] = Math.Round(PlantMeEfficiencyFebruary, 2);
                    plantmeTableFebruary = Math.Round(PlantMeEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyMarch = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyMarch)
                {
                    int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                    if (datedifference != 0)
                    {
                        average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                    }
                    else
                    {
                        average.Add(1);
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyMarch = (double)average.Sum() / average.Count();
                    plantmeEfficiency["March"] = Math.Round(PlantMeEfficiencyMarch, 2);
                    plantmeTableMarch = Math.Round(PlantMeEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyApril = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyApril)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyApril = (double)average.Sum() / average.Count();
                    plantmeEfficiency["April"] = Math.Round(PlantMeEfficiencyApril, 2);
                    plantmeTableApril = Math.Round(PlantMeEfficiencyApril, 2);
                }
            }
            else if (month == 5 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyMay = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyMay)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyMay = (double)average.Sum() / average.Count();
                    plantmeEfficiency["May"] = Math.Round(PlantMeEfficiencyMay, 2);
                    plantmeTableMay = Math.Round(PlantMeEfficiencyMay, 2);
                }
            }
            else if (month == 6 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyJune = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyJune)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyJune = (double)average.Sum() / average.Count();
                    plantmeEfficiency["June"] = Math.Round(PlantMeEfficiencyJune, 2);
                    plantmeTableJune = Math.Round(PlantMeEfficiencyJune, 2);
                }
            }
            else if (month == 7 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyJuly = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyJuly)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyJuly = (double)average.Sum() / average.Count();
                    plantmeEfficiency["July"] = Math.Round(PlantMeEfficiencyJuly, 2);
                    plantmeTableJuly = Math.Round(PlantMeEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyAugust = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyAugust)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyAugust = (double)average.Sum() / average.Count();
                    plantmeEfficiency["August"] = Math.Round(PlantMeEfficiencyAugust, 2);
                    plantmeTableAugust = Math.Round(PlantMeEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencySeptember = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencySeptember)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencySeptember = (double)average.Sum() / average.Count();
                    plantmeEfficiency["September"] = Math.Round(PlantMeEfficiencySeptember, 2);
                    plantmeTableSeptember = Math.Round(PlantMeEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyOctober = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyOctober)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyOctober = (double)average.Sum() / average.Count();
                    plantmeEfficiency["October"] = Math.Round(PlantMeEfficiencyOctober, 2);
                    plantmeTableOctober = Math.Round(PlantMeEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyNovember = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyNovember)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyNovember = (double)average.Sum() / average.Count();
                    plantmeEfficiency["November"] = Math.Round(PlantMeEfficiencyNovember, 2);
                    plantmeTableNovember = Math.Round(PlantMeEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && plantmeEfficiencyByMonth.Count() > 0)
            {
                plantmeEfficiencyDecember = plantmeEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantmeEfficiencyDecember)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate3.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double PlantMeEfficiencyDecember = (double)average.Sum() / average.Count();
                    plantmeEfficiency["December"] = Math.Round(PlantMeEfficiencyDecember, 2);
                    plantmeTableDecember = Math.Round(PlantMeEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of Cluster ME by month
    protected async Task GetEfficiencyByMonthinclusterME(int country, int year)
    {
        for (int month = 1; month <= 12; month++)
        {
            clustermeEfficiencyByMonth.Clear();

            if (country > 0)
            {
                clustermeEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate4.HasValue && x.ProcesslevelDate4?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate4?.Year == year)
                .ToList();
            }
            else
            {
                clustermeEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate4.HasValue && x.ProcesslevelDate4?.Month == month && x.ProcesslevelDate4?.Year == year)
               .ToList();
            }


            if (month == 1 && clustermeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyJanuary = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyJanuary)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyJanuary = (double)average.Sum() / average.Count();
                    clustermeEfficiency["January"] = Math.Round(ClusterMeEfficiencyJanuary, 2);
                    clustermeTableJanuary = Math.Round(ClusterMeEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && clustermeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyFebruary = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyFebruary)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyFebruary = (double)average.Sum() / average.Count();
                    clustermeEfficiency["February"] = Math.Round(ClusterMeEfficiencyFebruary, 2);
                    clustermeTableFebruary = Math.Round(ClusterMeEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && clustermeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyMarch = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyMarch)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyMarch = (double)average.Sum() / average.Count();
                    clustermeEfficiency["March"] = Math.Round(ClusterMeEfficiencyMarch, 2);
                    clustermeTableMarch = Math.Round(ClusterMeEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && clustermeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyApril = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyApril)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyApril = (double)average.Sum() / average.Count();
                    clustermeEfficiency["April"] = Math.Round(ClusterMeEfficiencyApril, 2);
                    clustermeTableApril = Math.Round(ClusterMeEfficiencyApril, 2);
                }
            }
            else if (month == 5 && clustermeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyMay = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyMay)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyMay = (double)average.Sum() / average.Count();
                    clustermeEfficiency["May"] = Math.Round(ClusterMeEfficiencyMay, 2);
                    clustermeTableMay = Math.Round(ClusterMeEfficiencyMay, 2);
                }
            }
            else if (month == 6 && clustermeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyJune = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyMay)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyJune = (double)average.Sum() / average.Count();
                    clustermeEfficiency["June"] = Math.Round(ClusterMeEfficiencyJune, 2);
                    clustermeTableJune = Math.Round(ClusterMeEfficiencyJune, 2);
                }
            }
            else if (month == 7 && clustermeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyJuly = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyJuly)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyJuly = (double)average.Sum() / average.Count();
                    clustermeEfficiency["July"] = Math.Round(ClusterMeEfficiencyJuly, 2);
                    clustermeTableJuly = Math.Round(ClusterMeEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && clustermeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyAugust = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyAugust)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyAugust = (double)average.Sum() / average.Count();
                    clustermeEfficiency["August"] = Math.Round(ClusterMeEfficiencyAugust, 2);
                    clustermeTableAugust = Math.Round(ClusterMeEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && plantmeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencySeptember = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencySeptember)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencySeptember = (double)average.Sum() / average.Count();
                    clustermeEfficiency["September"] = Math.Round(ClusterMeEfficiencySeptember, 2);
                    clustermeTableSeptember = Math.Round(ClusterMeEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && plantmeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyOctober = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyOctober)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyOctober = (double)average.Sum() / average.Count();
                    clustermeEfficiency["October"] = Math.Round(ClusterMeEfficiencyOctober, 2);
                    clustermeTableOctober = Math.Round(ClusterMeEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && clustermeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyNovember = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyNovember)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyNovember = (double)average.Sum() / average.Count();
                    clustermeEfficiency["November"] = Math.Round(ClusterMeEfficiencyNovember, 2);
                    clustermeTableNovember = Math.Round(ClusterMeEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && clustermeEfficiencyByMonth.Count() > 0)
            {
                clustermeEfficiencyDecember = clustermeEfficiencyByMonth;
                average.Clear();

                foreach (var data in clustermeEfficiencyDecember)
                {
                    if (data.Approval3 != null)
                    {
                        if (data.Approval3 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate4.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        int? datedifference = (data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days;

                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate4.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ClusterMeEfficiencyDecember = (double)average.Sum() / average.Count();
                    clustermeEfficiency["December"] = Math.Round(ClusterMeEfficiencyDecember, 2);
                    clustermeTableDecember = Math.Round(ClusterMeEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of Plant Finance by month
    protected async Task GetEfficiencyByMonthinPlantFinance(int country, int year)
    {

        for (int month = 1; month <= 12; month++)
        {
            plantfinanceEfficiencyByMonth.Clear();

            if (country > 0)
            {
                plantfinanceEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate5.HasValue && x.ProcesslevelDate5?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate5?.Year == year)
                .ToList();
            }
            else
            {
                plantfinanceEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate5.HasValue && x.ProcesslevelDate5?.Month == month && x.ProcesslevelDate5?.Year == year)
               .ToList();
            }


            if (month == 1 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyJanuary = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyJanuary)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyJanuary = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["January"] = Math.Round(PlantfinanceEfficiencyJanuary, 2);
                    plantfinanceTableJanuary = Math.Round(PlantfinanceEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyFebruary = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyFebruary)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyFebruary = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["February"] = Math.Round(PlantfinanceEfficiencyFebruary, 2);
                    plantfinanceTableFebruary = Math.Round(PlantfinanceEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyMarch = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyMarch)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyMarch = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["March"] = Math.Round(PlantfinanceEfficiencyMarch, 2);
                    plantfinanceTableMarch = Math.Round(PlantfinanceEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyApril = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyApril)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyApril = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["April"] = Math.Round(PlantfinanceEfficiencyApril, 2);
                    plantfinanceTableApril = Math.Round(PlantfinanceEfficiencyApril, 2);
                }
            }
            else if (month == 5 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyMay = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyMay)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyMay = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["May"] = Math.Round(PlantfinanceEfficiencyMay, 2);
                    plantfinanceTableMay = Math.Round(PlantfinanceEfficiencyMay, 2);
                }
            }
            else if (month == 6 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyJune = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyJune)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyJune = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["June"] = Math.Round(PlantfinanceEfficiencyJune, 2);
                    plantfinanceTableJune = Math.Round(PlantfinanceEfficiencyJune, 2);
                }
            }
            else if (month == 7 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyJuly = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyJuly)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyJuly = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["July"] = Math.Round(PlantfinanceEfficiencyJuly, 2);
                    plantfinanceTableJuly = Math.Round(PlantfinanceEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyAugust = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyAugust)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyAugust = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["August"] = Math.Round(PlantfinanceEfficiencyAugust, 2);
                    plantfinanceTableAugust = Math.Round(PlantfinanceEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencySeptember = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencySeptember)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencySeptember = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["September"] = Math.Round(PlantfinanceEfficiencySeptember, 2);
                    plantfinanceTableSeptember = Math.Round(PlantfinanceEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyOctober = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyOctober)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyOctober = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["October"] = Math.Round(PlantfinanceEfficiencyOctober, 2);
                    plantfinanceTableOctober = Math.Round(PlantfinanceEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyNovember = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyNovember)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyNovember = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["November"] = Math.Round(PlantfinanceEfficiencyNovember, 2);
                    plantfinanceTableNovember = Math.Round(PlantfinanceEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && plantfinanceEfficiencyByMonth.Count() > 0)
            {
                plantfinanceEfficiencyDecember = plantfinanceEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantfinanceEfficiencyDecember)
                {
                    if (data.Approval5 != null)
                    {
                        if (data.Approval5 != "N/A")
                        {
                            if (data.Approval4 != null)
                            {
                                if (data.Approval4 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate4.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }
                            else if (data.Approval3 != null)
                            {
                                if (data.Approval3 != "N/A")
                                {
                                    int? datedifference = (data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days;

                                    if (datedifference != 0)
                                    {
                                        average.Add((data.ProcesslevelDate5.Value.Date - data.ProcesslevelDate3.Value.Date).Days);
                                    }
                                    else
                                    {
                                        average.Add(1);
                                    }
                                }
                            }

                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantfinanceEfficiencyDecember = (double)average.Sum() / average.Count();
                    plantfinanceEfficiency["December"] = Math.Round(PlantfinanceEfficiencyDecember, 2);
                    plantfinanceTableDecember = Math.Round(PlantfinanceEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of Plant General Management by month
    protected async Task GetEfficiencyByMonthinPlantGeneralManagement(int country, int year)
    {

        for (int month = 1; month <= 12; month++)
        {
            plantgeneralmanagementEfficiencyByMonth.Clear();

            if (country > 0)
            {
                plantgeneralmanagementEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate6.HasValue && x.ProcesslevelDate6?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate6?.Year == year)
                .ToList();
            }
            else
            {
                plantgeneralmanagementEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate6.HasValue && x.ProcesslevelDate6?.Month == month && x.ProcesslevelDate6?.Year == year)
               .ToList();
            }


            if (month == 1 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyJanuary = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyJanuary)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyJanuary = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["January"] = Math.Round(PlantgeneralmanagementEfficiencyJanuary, 2);
                    plantmanagementTableJanuary = Math.Round(PlantgeneralmanagementEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyFebruary = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyFebruary)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyFebruary = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["February"] = Math.Round(PlantgeneralmanagementEfficiencyFebruary, 2);
                    plantmanagementTableFebruary = Math.Round(PlantgeneralmanagementEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyMarch = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyMarch)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyMarch = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["March"] = Math.Round(PlantgeneralmanagementEfficiencyMarch, 2);
                    plantmanagementTableMarch = Math.Round(PlantgeneralmanagementEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyApril = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyApril)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyApril = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["April"] = Math.Round(PlantgeneralmanagementEfficiencyApril, 2);
                    plantmanagementTableApril = Math.Round(PlantgeneralmanagementEfficiencyApril, 2);
                }
            }
            else if (month == 5 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyMay = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyMay)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyMay = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["May"] = Math.Round(PlantgeneralmanagementEfficiencyMay, 2);
                    plantmanagementTableMay = Math.Round(PlantgeneralmanagementEfficiencyMay, 2);
                }
            }
            else if (month == 6 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyJune = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyJune)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyJune = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["June"] = Math.Round(PlantgeneralmanagementEfficiencyJune, 2);
                    plantmanagementTableJune = Math.Round(PlantgeneralmanagementEfficiencyJune, 2);
                }
            }
            else if (month == 7 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyJuly = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyJuly)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyJuly = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["July"] = Math.Round(PlantgeneralmanagementEfficiencyJuly, 2);
                    plantmanagementTableJuly = Math.Round(PlantgeneralmanagementEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyAugust = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyAugust)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyAugust = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["August"] = Math.Round(PlantgeneralmanagementEfficiencyAugust, 2);
                    plantmanagementTableAugust = Math.Round(PlantgeneralmanagementEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencySeptember = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencySeptember)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencySeptember = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["September"] = Math.Round(PlantgeneralmanagementEfficiencySeptember, 2);
                    plantmanagementTableSeptember = Math.Round(PlantgeneralmanagementEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyOctober = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyOctober)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyOctober = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["October"] = Math.Round(PlantgeneralmanagementEfficiencyOctober, 2);
                    plantmanagementTableOctober = Math.Round(PlantgeneralmanagementEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyNovember = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyNovember)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyNovember = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["November"] = Math.Round(PlantgeneralmanagementEfficiencyNovember, 2);
                    plantmanagementTableNovember = Math.Round(PlantgeneralmanagementEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && plantgeneralmanagementEfficiencyByMonth.Count() > 0)
            {
                plantgeneralmanagementEfficiencyDecember = plantgeneralmanagementEfficiencyByMonth;
                average.Clear();

                foreach (var data in plantgeneralmanagementEfficiencyDecember)
                {
                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate6.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double PlantgeneralmanagementEfficiencyDecember = (double)average.Sum() / average.Count();
                    plantgeneralmanagementEfficiency["December"] = Math.Round(PlantgeneralmanagementEfficiencyDecember, 2);
                    plantmanagementTableDecember = Math.Round(PlantgeneralmanagementEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of MEC by month
    protected async Task GetEfficiencyByMonthinMEC(int country, int year)
    {
        for (int month = 1; month <= 12; month++)
        {
            mecEfficiencyByMonth.Clear();

            if (country > 0)
            {
                mecEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate7.HasValue && x.ProcesslevelDate7?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate7?.Year == year)
                .ToList();
            }
            else
            {
                mecEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate7.HasValue && x.ProcesslevelDate7?.Month == month && x.ProcesslevelDate7?.Year == year)
               .ToList();
            }


            if (month == 1 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyJanuary = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyJanuary)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double MecEfficiencyJanuary = (double)average.Sum() / average.Count();
                    mecEfficiency["January"] = Math.Round(MecEfficiencyJanuary, 2);
                    mecTableJanuary = Math.Round(MecEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyFebruary = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyFebruary)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }
                if (average.Count() > 0)
                {
                    double MecEfficiencyFebruary = (double)average.Sum() / average.Count();
                    mecEfficiency["February"] = Math.Round(MecEfficiencyFebruary, 2);
                    mecTableFebruary = Math.Round(MecEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyMarch = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyMarch)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }
                if (average.Count() > 0)
                {
                    double MecEfficiencyMarch = (double)average.Sum() / average.Count();
                    mecEfficiency["March"] = Math.Round(MecEfficiencyMarch, 2);
                    mecTableMarch = Math.Round(MecEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyApril = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyApril)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double MecEfficiencyApril = (double)average.Sum() / average.Count();
                    mecEfficiency["April"] = Math.Round(MecEfficiencyApril, 2);
                    mecTableApril = Math.Round(MecEfficiencyApril, 2);
                }
            }
            else if (month == 5 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyMay = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyMay)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date.Date - data.Investments.IssueDate.Value.Date.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date.Date - data.Investments.IssueDate.Value.Date.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double MecEfficiencyMay = (double)average.Sum() / average.Count();
                    mecEfficiency["May"] = Math.Round(MecEfficiencyMay, 2);
                    mecTableMay = Math.Round(MecEfficiencyMay, 2);
                }
            }
            else if (month == 6 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyJune = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyJune)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }
                if (average.Count() > 0)
                {
                    double MecEfficiencyJune = (double)average.Sum() / average.Count();
                    mecEfficiency["June"] = Math.Round(MecEfficiencyJune, 2);
                    mecTableJune = Math.Round(MecEfficiencyJune, 2);
                }
            }
            else if (month == 7 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyJuly = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyJuly)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }
                if (average.Count() > 0)
                {
                    double MecEfficiencyJuly = (double)average.Sum() / average.Count();
                    mecEfficiency["July"] = Math.Round(MecEfficiencyJuly, 2);
                    mecTableJuly = Math.Round(MecEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyAugust = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyAugust)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }
                if (average.Count() > 0)
                {
                    double MecEfficiencyAugust = (double)average.Sum() / average.Count();
                    mecEfficiency["August"] = Math.Round(MecEfficiencyAugust, 2);
                    mecTableAugust = Math.Round(MecEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencySeptember = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencySeptember)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }

                if (average.Count() > 0)
                {
                    double MecEfficiencySeptember = (double)average.Sum() / average.Count();
                    mecEfficiency["September"] = Math.Round(MecEfficiencySeptember, 2);
                    mecTableSeptember = Math.Round(MecEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyOctober = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyOctober)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }
                if (average.Count() > 0)
                {
                    double MecEfficiencyOctober = (double)average.Sum() / average.Count();
                    mecEfficiency["October"] = Math.Round(MecEfficiencyOctober, 2);
                    mecTableOctober = Math.Round(MecEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyNovember = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyNovember)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }
                if (average.Count() > 0)
                {
                    double MecEfficiencyNovember = (double)average.Sum() / average.Count();
                    mecEfficiency["November"] = Math.Round(MecEfficiencyNovember, 2);
                    mecTableNovember = Math.Round(MecEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && mecEfficiencyByMonth.Count() > 0)
            {
                mecEfficiencyDecember = mecEfficiencyByMonth;
                average.Clear();

                foreach (var data in mecEfficiencyDecember)
                {
                    if (data.Investments.CountryId == 10 || data.Investments.CountryId == 11 || data.Investments.CountryId == 12 || data.Investments.CountryId == 13 || data.Investments.CountryId == 14
                       || data.Investments.CountryId == 15 || data.Investments.CountryId == 16)
                    {
                        int? datedifference = (data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days;
                        if (datedifference != 0)
                        {
                            average.Add((data.ProcesslevelDate7.Value.Date - data.Investments.IssueDate.Value.Date).Days);
                        }
                        else
                        {
                            average.Add(1);
                        }
                    }

                    if (data.Approval6 != null)
                    {
                        if (data.Approval6 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate6.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (data.Approval5 != null)
                        {
                            if (data.Approval5 != "N/A")
                            {
                                int? datedifference = (data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days;
                                if (datedifference != 0)
                                {
                                    average.Add((data.ProcesslevelDate7.Value.Date - data.ProcesslevelDate5.Value.Date).Days);
                                }
                                else
                                {
                                    average.Add(1);
                                }
                            }
                        }
                    }

                }
                if (average.Count() > 0)
                {
                    double MecEfficiencyDecember = (double)average.Sum() / average.Count();
                    mecEfficiency["December"] = Math.Round(MecEfficiencyDecember, 2);
                    mecTableDecember = Math.Round(MecEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of Program Manager by month
    protected async Task GetEfficiencyByMonthinProgramManager(int country, int year)
    {

        for (int month = 1; month <= 12; month++)
        {
            programmanagerEfficiencyByMonth.Clear();

            if (country > 0)
            {
                programmanagerEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate8.HasValue && x.ProcesslevelDate8?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate8?.Year == year)
                .ToList();
            }
            else
            {
                programmanagerEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate8.HasValue && x.ProcesslevelDate8?.Month == month && x.ProcesslevelDate8?.Year == year)
               .ToList();
            }


            if (month == 1 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyJanuary = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyJanuary)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyJanuary = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["January"] = Math.Round(ProgrammanagerEfficiencyJanuary, 2);
                    pmTableJanuary = Math.Round(ProgrammanagerEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyFebruary = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyFebruary)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyFebruary = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["February"] = Math.Round(ProgrammanagerEfficiencyFebruary, 2);
                    pmTableFebruary = Math.Round(ProgrammanagerEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyMarch = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyMarch)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyMarch = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["March"] = Math.Round(ProgrammanagerEfficiencyMarch, 2);
                    pmTableMarch = Math.Round(ProgrammanagerEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyApril = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyApril)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyApril = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["April"] = Math.Round(ProgrammanagerEfficiencyApril, 2);
                    pmTableApril = Math.Round(ProgrammanagerEfficiencyApril, 2);
                }
            }
            else if (month == 5 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyMay = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyMay)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyMay = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["May"] = Math.Round(ProgrammanagerEfficiencyMay, 2);
                    pmTableMay = Math.Round(ProgrammanagerEfficiencyMay, 2);
                }
            }
            else if (month == 6 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyJune = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyJune)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyJune = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["June"] = Math.Round(ProgrammanagerEfficiencyJune, 2);
                    pmTableJune = Math.Round(ProgrammanagerEfficiencyJune, 2);
                }
            }
            else if (month == 7 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyJuly = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyJuly)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyJuly = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["July"] = Math.Round(ProgrammanagerEfficiencyJuly, 2);
                    pmTableJuly = Math.Round(ProgrammanagerEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyAugust = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyAugust)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyAugust = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["August"] = Math.Round(ProgrammanagerEfficiencyAugust, 2);
                    pmTableAugust = Math.Round(ProgrammanagerEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencySeptember = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencySeptember)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencySeptember = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["September"] = Math.Round(ProgrammanagerEfficiencySeptember, 2);
                    pmTableSeptember = Math.Round(ProgrammanagerEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyOctober = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyOctober)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyOctober = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["October"] = Math.Round(ProgrammanagerEfficiencyOctober, 2);
                    pmTableOctober = Math.Round(ProgrammanagerEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyNovember = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyNovember)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyNovember = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["November"] = Math.Round(ProgrammanagerEfficiencyNovember, 2);
                    pmTableNovember = Math.Round(ProgrammanagerEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && programmanagerEfficiencyByMonth.Count() > 0)
            {
                programmanagerEfficiencyDecember = programmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in programmanagerEfficiencyDecember)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate8.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double ProgrammanagerEfficiencyDecember = (double)average.Sum() / average.Count();
                    programmanagerEfficiency["December"] = Math.Round(ProgrammanagerEfficiencyDecember, 2);
                    pmTableDecember = Math.Round(ProgrammanagerEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of Capital Manager by month
    protected async Task GetEfficiencyByMonthinCapitalManager(int country, int year)
    {

        for (int month = 1; month <= 12; month++)
        {
            capitalmanagerEfficiencyByMonth.Clear();

            if (country > 0)
            {
                capitalmanagerEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate9.HasValue && x.ProcesslevelDate9?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate9?.Year == year)
                .ToList();
            }
            else
            {
                capitalmanagerEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate9.HasValue && x.ProcesslevelDate9?.Month == month && x.ProcesslevelDate9?.Year == year)
               .ToList();
            }


            if (month == 1 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyJanuary = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyJanuary)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyJanuary = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["January"] = Math.Round(CapitalmanagerEfficiencyJanuary, 2);
                    capitalTableJanuary = Math.Round(CapitalmanagerEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyFebruary = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyFebruary)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyFebruary = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["February"] = Math.Round(CapitalmanagerEfficiencyFebruary, 2);
                    capitalTableFebruary = Math.Round(CapitalmanagerEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyMarch = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyMarch)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyMarch = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["March"] = Math.Round(CapitalmanagerEfficiencyMarch, 2);
                    capitalTableMarch = Math.Round(CapitalmanagerEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyApril = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyApril)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyApril = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["April"] = Math.Round(CapitalmanagerEfficiencyApril, 2);
                    capitalTableApril = Math.Round(CapitalmanagerEfficiencyApril, 2);
                }
            }
            else if (month == 5 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyMay = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyMay)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyMay = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["May"] = Math.Round(CapitalmanagerEfficiencyMay, 2);
                    capitalTableMay = Math.Round(CapitalmanagerEfficiencyMay, 2);
                }
            }
            else if (month == 6 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyJune = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyJune)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyJune = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["June"] = Math.Round(CapitalmanagerEfficiencyJune, 2);
                    capitalTableJune = Math.Round(CapitalmanagerEfficiencyJune, 2);
                }
            }
            else if (month == 7 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyJuly = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyJuly)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyJuly = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["July"] = Math.Round(CapitalmanagerEfficiencyJuly, 2);
                    capitalTableJuly = Math.Round(CapitalmanagerEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyAugust = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyAugust)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyAugust = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["August"] = Math.Round(CapitalmanagerEfficiencyAugust, 2);
                    capitalTableAugust = Math.Round(CapitalmanagerEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencySeptember = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencySeptember)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencySeptember = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["September"] = Math.Round(CapitalmanagerEfficiencySeptember, 2);
                    capitalTableSeptember = Math.Round(CapitalmanagerEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyOctober = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyOctober)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyOctober = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["October"] = Math.Round(CapitalmanagerEfficiencyOctober, 2);
                    capitalTableOctober = Math.Round(CapitalmanagerEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyNovember = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyNovember)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyNovember = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["November"] = Math.Round(CapitalmanagerEfficiencyNovember, 2);
                    capitalTableNovember = Math.Round(CapitalmanagerEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && capitalmanagerEfficiencyByMonth.Count() > 0)
            {
                capitalmanagerEfficiencyDecember = capitalmanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in capitalmanagerEfficiencyDecember)
                {
                    if (data.Approval8 != null)
                    {
                        if (data.Approval8 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate8.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                    else if (data.Approval7 != null)
                    {
                        if (data.Approval7 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate9.Value.Date - data.ProcesslevelDate7.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double CapitalmanagerEfficiencyDecember = (double)average.Sum() / average.Count();
                    capitalmanagerEfficiency["December"] = Math.Round(CapitalmanagerEfficiencyDecember, 2);
                    capitalTableDecember = Math.Round(CapitalmanagerEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of Advance Manager by month
    protected async Task GetEfficiencyByMonthinAdvanceManager(int country, int year)
    {

        for (int month = 1; month <= 12; month++)
        {
            advancemanagerEfficiencyByMonth.Clear();

            if (country > 0)
            {
                advancemanagerEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate10.HasValue && x.ProcesslevelDate10?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate10?.Year == year)
                .ToList();
            }
            else
            {
                advancemanagerEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate10.HasValue && x.ProcesslevelDate10?.Month == month && x.ProcesslevelDate10?.Year == year)
               .ToList();
            }


            if (month == 1 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyJanuary = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyJanuary)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyJanuary = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["January"] = Math.Round(AdvancemanagerEfficiencyJanuary, 2);
                    advanceTableJanuary = Math.Round(AdvancemanagerEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyFebruary = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyFebruary)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyFebruary = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["February"] = Math.Round(AdvancemanagerEfficiencyFebruary, 2);
                    advanceTableFebruary = Math.Round(AdvancemanagerEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyMarch = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyMarch)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyMarch = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["March"] = Math.Round(AdvancemanagerEfficiencyMarch, 2);
                    advanceTableMarch = Math.Round(AdvancemanagerEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyApril = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyApril)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyApril = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["April"] = Math.Round(AdvancemanagerEfficiencyApril, 2);
                    advanceTableApril = Math.Round(AdvancemanagerEfficiencyApril, 2);
                }
            }
            else if (month == 5 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyMay = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyMay)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyMay = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["May"] = Math.Round(AdvancemanagerEfficiencyMay, 2);
                    advanceTableMay = Math.Round(AdvancemanagerEfficiencyMay, 2);
                }
            }
            else if (month == 6 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyJune = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyJune)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyJune = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["June"] = Math.Round(AdvancemanagerEfficiencyJune, 2);
                    advanceTableJune = Math.Round(AdvancemanagerEfficiencyJune, 2);
                }
            }
            else if (month == 7 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyJuly = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyJuly)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyJuly = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["July"] = Math.Round(AdvancemanagerEfficiencyJuly, 2);
                    advanceTableJuly = Math.Round(AdvancemanagerEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyAugust = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyAugust)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyAugust = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["August"] = Math.Round(AdvancemanagerEfficiencyAugust, 2);
                    advanceTableAugust = Math.Round(AdvancemanagerEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencySeptember = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencySeptember)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencySeptember = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["September"] = Math.Round(AdvancemanagerEfficiencySeptember, 2);
                    advanceTableSeptember = Math.Round(AdvancemanagerEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyOctober = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyOctober)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyOctober = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["October"] = Math.Round(AdvancemanagerEfficiencyOctober, 2);
                    advanceTableOctober = Math.Round(AdvancemanagerEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyNovember = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyNovember)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyNovember = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["November"] = Math.Round(AdvancemanagerEfficiencyNovember, 2);
                    advanceTableNovember = Math.Round(AdvancemanagerEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && advancemanagerEfficiencyByMonth.Count() > 0)
            {
                advancemanagerEfficiencyDecember = advancemanagerEfficiencyByMonth;
                average.Clear();

                foreach (var data in advancemanagerEfficiencyDecember)
                {
                    if (data.Approval10 != null)
                    {
                        if (data.Approval10 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate10.Value.Date - data.ProcesslevelDate9.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double AdvancemanagerEfficiencyDecember = (double)average.Sum() / average.Count();
                    advancemanagerEfficiency["December"] = Math.Round(AdvancemanagerEfficiencyDecember, 2);
                    advanceTableDecember = Math.Round(AdvancemanagerEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of ME Director by month
    protected async Task GetEfficiencyByMonthinMEDirector(int country, int year)
    {

        for (int month = 1; month <= 12; month++)
        {
            medirectorEfficiencyByMonth.Clear();

            if (country > 0)
            {
                medirectorEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate11.HasValue && x.ProcesslevelDate11?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate11?.Year == year)
                .ToList();
            }
            else
            {
                medirectorEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate11.HasValue && x.ProcesslevelDate11?.Month == month && x.ProcesslevelDate11?.Year == year)
               .ToList();
            }


            if (month == 1 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyJanuary = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyJanuary)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyJanuary = (double)average.Sum() / average.Count();
                    medirectorEfficiency["January"] = Math.Round(MedirectorEfficiencyJanuary, 2);
                    medirectorTableJanuary = Math.Round(MedirectorEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyFebruary = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyFebruary)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyFebruary = (double)average.Sum() / average.Count();
                    medirectorEfficiency["February"] = Math.Round(MedirectorEfficiencyFebruary, 2);
                    medirectorTableFebruary = Math.Round(MedirectorEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyMarch = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyMarch)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyMarch = (double)average.Sum() / average.Count();
                    medirectorEfficiency["March"] = Math.Round(MedirectorEfficiencyMarch, 2);
                    medirectorTableMarch = Math.Round(MedirectorEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyApril = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyApril)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyApril = (double)average.Sum() / average.Count();
                    medirectorEfficiency["April"] = Math.Round(MedirectorEfficiencyApril, 2);
                    medirectorTableApril = Math.Round(MedirectorEfficiencyApril, 2);
                }
            }
            else if (month == 5 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyMay = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyMay)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyMay = (double)average.Sum() / average.Count();
                    medirectorEfficiency["May"] = Math.Round(MedirectorEfficiencyMay, 2);
                    medirectorTableMay = Math.Round(MedirectorEfficiencyMay, 2);
                }
            }
            else if (month == 6 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyJune = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyJune)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyJune = (double)average.Sum() / average.Count();
                    medirectorEfficiency["June"] = Math.Round(MedirectorEfficiencyJune, 2);
                    medirectorTableJune = Math.Round(MedirectorEfficiencyJune, 2);
                }
            }
            else if (month == 7 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyJuly = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyJuly)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyJuly = (double)average.Sum() / average.Count();
                    medirectorEfficiency["July"] = Math.Round(MedirectorEfficiencyJuly, 2);
                    medirectorTableJuly = Math.Round(MedirectorEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyAugust = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyAugust)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyAugust = (double)average.Sum() / average.Count();
                    medirectorEfficiency["August"] = Math.Round(MedirectorEfficiencyAugust, 2);
                    medirectorTableAugust = Math.Round(MedirectorEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencySeptember = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencySeptember)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencySeptember = (double)average.Sum() / average.Count();
                    medirectorEfficiency["September"] = Math.Round(MedirectorEfficiencySeptember, 2);
                    medirectorTableSeptember = Math.Round(MedirectorEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyOctober = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyOctober)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyOctober = (double)average.Sum() / average.Count();
                    medirectorEfficiency["October"] = Math.Round(MedirectorEfficiencyOctober, 2);
                    medirectorTableOctober = Math.Round(MedirectorEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyNovember = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyNovember)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyNovember = (double)average.Sum() / average.Count();
                    medirectorEfficiency["November"] = Math.Round(MedirectorEfficiencyNovember, 2);
                    medirectorTableNovember = Math.Round(MedirectorEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && medirectorEfficiencyByMonth.Count() > 0)
            {
                medirectorEfficiencyDecember = medirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in medirectorEfficiencyDecember)
                {
                    if (data.Approval11 != null)
                    {
                        if (data.Approval11 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate11.Value.Date - data.ProcesslevelDate10.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double MedirectorEfficiencyDecember = (double)average.Sum() / average.Count();
                    medirectorEfficiency["December"] = Math.Round(MedirectorEfficiencyDecember, 2);
                    medirectorTableDecember = Math.Round(MedirectorEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of Krakow Finance Leader by month
    protected async Task GetEfficiencyByMonthinKrakowFinanceLeader(int country, int year)
    {

        for (int month = 1; month <= 12; month++)
        {
            krakowfinanceleaderEfficiencyByMonth.Clear();

            if (country > 0)
            {
                krakowfinanceleaderEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate12.HasValue && x.ProcesslevelDate12?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate12?.Year == year)
                .ToList();
            }
            else
            {
                krakowfinanceleaderEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate12.HasValue && x.ProcesslevelDate12?.Month == month && x.ProcesslevelDate12?.Year == year)
               .ToList();
            }


            if (month == 1 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyJanuary = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyJanuary)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyJanuary = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["January"] = Math.Round(KrakowfinanceleaderEfficiencyJanuary, 2);
                    krakowleaderTableJanuary = Math.Round(KrakowfinanceleaderEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyFebruary = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyFebruary)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyFebruary = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["February"] = Math.Round(KrakowfinanceleaderEfficiencyFebruary, 2);
                    krakowleaderTableFebruary = Math.Round(KrakowfinanceleaderEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyMarch = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyMarch)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyMarch = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["March"] = Math.Round(KrakowfinanceleaderEfficiencyMarch, 2);
                    krakowleaderTableMarch = Math.Round(KrakowfinanceleaderEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyApril = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyApril)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyApril = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["April"] = Math.Round(KrakowfinanceleaderEfficiencyApril, 2);
                    krakowleaderTableApril = Math.Round(KrakowfinanceleaderEfficiencyApril, 2);
                }
            }
            else if (month == 5 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyMay = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyMay)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyMay = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["May"] = Math.Round(KrakowfinanceleaderEfficiencyMay, 2);
                    krakowleaderTableMay = Math.Round(KrakowfinanceleaderEfficiencyMay, 2);
                }
            }
            else if (month == 6 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyJune = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyJune)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyJune = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["June"] = Math.Round(KrakowfinanceleaderEfficiencyJune, 2);
                    krakowleaderTableJune = Math.Round(KrakowfinanceleaderEfficiencyJune, 2);
                }
            }
            else if (month == 7 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyJuly = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyJuly)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyJuly = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["July"] = Math.Round(KrakowfinanceleaderEfficiencyJuly, 2);
                    krakowleaderTableJuly = Math.Round(KrakowfinanceleaderEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyAugust = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyAugust)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyAugust = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["August"] = Math.Round(KrakowfinanceleaderEfficiencyAugust, 2);
                    krakowleaderTableAugust = Math.Round(KrakowfinanceleaderEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencySeptember = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencySeptember)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencySeptember = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["September"] = Math.Round(KrakowfinanceleaderEfficiencySeptember, 2);
                    krakowleaderTableSeptember = Math.Round(KrakowfinanceleaderEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyOctober = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyOctober)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyOctober = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["October"] = Math.Round(KrakowfinanceleaderEfficiencyOctober, 2);
                    krakowleaderTableOctober = Math.Round(KrakowfinanceleaderEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyNovember = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyNovember)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyNovember = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["November"] = Math.Round(KrakowfinanceleaderEfficiencyNovember, 2);
                    krakowleaderTableNovember = Math.Round(KrakowfinanceleaderEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && krakowfinanceleaderEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceleaderEfficiencyDecember = krakowfinanceleaderEfficiencyByMonth;
                average.Clear();

                foreach (var data in krakowfinanceleaderEfficiencyDecember)
                {
                    if (data.Approval12 != null)
                    {
                        if (data.Approval12 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate12.Value.Date - data.ProcesslevelDate11.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceleaderEfficiencyDecember = (double)average.Sum() / average.Count();
                    krakowfinanceleaderEfficiency["December"] = Math.Round(KrakowfinanceleaderEfficiencyDecember, 2);
                    krakowleaderTableDecember = Math.Round(KrakowfinanceleaderEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of Regional Finance Director by month
    protected async Task GetEfficiencyByMonthinRegionalFinanceDirector(int country, int year)
    {

        for (int month = 1; month <= 12; month++)
        {
            regionalfinancedirectorEfficiencyByMonth.Clear();

            if (country > 0)
            {
                regionalfinancedirectorEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate13.HasValue && x.ProcesslevelDate13?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate13?.Year == year)
                .ToList();
            }
            else
            {
                regionalfinancedirectorEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate13.HasValue && x.ProcesslevelDate13?.Month == month && x.ProcesslevelDate13?.Year == year)
               .ToList();
            }


            if (month == 1 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyJanuary = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyJanuary)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyJanuary = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["January"] = Math.Round(regionalfinancedirectorEfficiencyJanuary, 2);
                    financedirectorTableJanuary = Math.Round(regionalfinancedirectorEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyFebruary = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyFebruary)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyFebruary = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["February"] = Math.Round(regionalfinancedirectorEfficiencyFebruary, 2);
                    financedirectorTableFebruary = Math.Round(regionalfinancedirectorEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyMarch = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyMarch)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyMarch = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["March"] = Math.Round(regionalfinancedirectorEfficiencyMarch, 2);
                    financedirectorTableMarch = Math.Round(regionalfinancedirectorEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyApril = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyApril)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyApril = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["April"] = Math.Round(regionalfinancedirectorEfficiencyApril, 2);
                    financedirectorTableApril = Math.Round(regionalfinancedirectorEfficiencyApril, 2);
                }
            }
            else if (month == 5 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyApril = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyMay)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyMay = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["May"] = Math.Round(regionalfinancedirectorEfficiencyMay, 2);
                    financedirectorTableMay = Math.Round(regionalfinancedirectorEfficiencyMay, 2);
                }
            }
            else if (month == 6 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyJune = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyJune)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyJune = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["June"] = Math.Round(regionalfinancedirectorEfficiencyJune, 2);
                    financedirectorTableJune = Math.Round(regionalfinancedirectorEfficiencyJune, 2);
                }
            }
            else if (month == 7 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyJuly = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyJuly)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyJuly = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["July"] = Math.Round(regionalfinancedirectorEfficiencyJuly, 2);
                    financedirectorTableJuly = Math.Round(regionalfinancedirectorEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyAugust = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyAugust)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyAugust = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["August"] = Math.Round(regionalfinancedirectorEfficiencyAugust, 2);
                    financedirectorTableAugust = Math.Round(regionalfinancedirectorEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencySeptember = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencySeptember)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencySeptember = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["September"] = Math.Round(regionalfinancedirectorEfficiencySeptember, 2);
                    financedirectorTableSeptember = Math.Round(regionalfinancedirectorEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyOctober = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyOctober)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyOctober = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["October"] = Math.Round(regionalfinancedirectorEfficiencyOctober, 2);
                    financedirectorTableOctober = Math.Round(regionalfinancedirectorEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyNovember = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyNovember)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyNovember = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["November"] = Math.Round(regionalfinancedirectorEfficiencyNovember, 2);
                    financedirectorTableNovember = Math.Round(regionalfinancedirectorEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && regionalfinancedirectorEfficiencyByMonth.Count() > 0)
            {
                regionalfinancedirectorEfficiencyDecember = regionalfinancedirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalfinancedirectorEfficiencyDecember)
                {
                    if (data.Approval13 != null)
                    {
                        if (data.Approval13 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate13.Value.Date - data.ProcesslevelDate12.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalfinancedirectorEfficiencyDecember = (double)average.Sum() / average.Count();
                    regionalfinancedirectorEfficiency["December"] = Math.Round(regionalfinancedirectorEfficiencyDecember, 2);
                    financedirectorTableDecember = Math.Round(regionalfinancedirectorEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of Regional Managing Director by month
    protected async Task GetEfficiencyByMonthinRegionalManagingDirector(int country, int year)
    {

        for (int month = 1; month <= 12; month++)
        {
            regionalmanagingdirectorEfficiencyByMonth.Clear();

            if (country > 0)
            {
                regionalmanagingdirectorEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate14.HasValue && x.ProcesslevelDate14?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate14?.Year == year)
                .ToList();
            }
            else
            {
                regionalmanagingdirectorEfficiencyByMonth = investmenthistoryService.GetAll().Result
               .Where(x => x.ProcesslevelDate14.HasValue && x.ProcesslevelDate14?.Month == month && x.ProcesslevelDate14?.Year == year)
               .ToList();
            }


            if (month == 1 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyJanuary = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyJanuary)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyJanuary = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["January"] = Math.Round(regionalmanagingdirectorEfficiencyJanuary, 2);
                    managingdirectorTableJanuary = Math.Round(regionalmanagingdirectorEfficiencyJanuary, 2);
                }
            }
            else if (month == 2 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyFebruary = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyFebruary)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyFebruary = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["February"] = Math.Round(regionalmanagingdirectorEfficiencyFebruary, 2);
                    managingdirectorTableFebruary = Math.Round(regionalmanagingdirectorEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyMarch = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyMarch)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyMarch = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["March"] = Math.Round(regionalmanagingdirectorEfficiencyMarch, 2);
                    managingdirectorTableMarch = Math.Round(regionalmanagingdirectorEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyApril = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyApril)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyApril = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["April"] = Math.Round(regionalmanagingdirectorEfficiencyApril, 2);
                    managingdirectorTableApril = Math.Round(regionalmanagingdirectorEfficiencyApril, 2);
                }
            }
            else if (month == 5 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyMay = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyMay)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyMay = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["May"] = Math.Round(regionalmanagingdirectorEfficiencyMay, 2);
                    managingdirectorTableMay = Math.Round(regionalmanagingdirectorEfficiencyMay, 2);
                }
            }
            else if (month == 6 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyJune = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyJune)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyJune = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["June"] = Math.Round(regionalmanagingdirectorEfficiencyJune, 2);
                    managingdirectorTableJune = Math.Round(regionalmanagingdirectorEfficiencyJune, 2);
                }
            }
            else if (month == 7 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyJuly = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyJuly)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyJuly = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["July"] = Math.Round(regionalmanagingdirectorEfficiencyJuly, 2);
                    managingdirectorTableJuly = Math.Round(regionalmanagingdirectorEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyAugust = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyAugust)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyAugust = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["August"] = Math.Round(regionalmanagingdirectorEfficiencyAugust, 2);
                    managingdirectorTableAugust = Math.Round(regionalmanagingdirectorEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencySeptember = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencySeptember)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencySeptember = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["September"] = Math.Round(regionalmanagingdirectorEfficiencySeptember, 2);
                    managingdirectorTableSeptember = Math.Round(regionalmanagingdirectorEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyOctober = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyOctober)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyOctober = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["October"] = Math.Round(regionalmanagingdirectorEfficiencyOctober, 2);
                    managingdirectorTableOctober = Math.Round(regionalmanagingdirectorEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyNovember = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyNovember)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyNovember = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["November"] = Math.Round(regionalmanagingdirectorEfficiencyNovember, 2);
                    managingdirectorTableNovember = Math.Round(regionalmanagingdirectorEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && regionalmanagingdirectorEfficiencyByMonth.Count() > 0)
            {
                regionalmanagingdirectorEfficiencyDecember = regionalmanagingdirectorEfficiencyByMonth;
                average.Clear();

                foreach (var data in regionalmanagingdirectorEfficiencyDecember)
                {
                    if (data.Approval14 != null)
                    {
                        if (data.Approval14 != "N/A")
                        {
                            int? datedifference = (data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days;

                            if (datedifference != 0)
                            {
                                average.Add((data.ProcesslevelDate14.Value.Date - data.ProcesslevelDate13.Value.Date).Days);
                            }
                            else
                            {
                                average.Add(1);
                            }
                        }
                    }
                }

                if (average.Count() > 0)
                {
                    double regionalmanagingdirectorEfficiencyDecember = (double)average.Sum() / average.Count();
                    regionalmanagingdirectorEfficiency["December"] = Math.Round(regionalmanagingdirectorEfficiencyDecember, 2);
                    managingdirectorTableDecember = Math.Round(regionalmanagingdirectorEfficiencyDecember, 2);
                }
            }
        }
    }

    // Get the leadtime/efficiency of Krakow Finance Team by month
    protected async Task GetEfficiencyByMonthinKrakowFinanceTeam(int country, int year)
    {

        for (int month = 1; month <= 12; month++)
        {
            if (country > 0)
            {
                krakowfinanceteamEfficiencyByMonth = investmenthistoryService.GetAll().Result
    .Where(x => x.ProcesslevelDate15.HasValue && x.ProcesslevelDate15?.Month == month && x.Investments?.CountryId == country && x.ProcesslevelDate15?.Year == year)
    .ToList();
            }
            else
            {
                krakowfinanceteamEfficiencyByMonth = investmenthistoryService.GetAll().Result
                .Where(x => x.ProcesslevelDate15.HasValue && x.ProcesslevelDate15?.Month == month && x.ProcesslevelDate15?.Year == year)
                .ToList();
            }

            if (month == 1 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyJanuary = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyJanuary = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["January"] = Math.Round(KrakowfinanceteamEfficiencyJanuary, 2);
                    krakowteamTableJanuary = Math.Round(KrakowfinanceteamEfficiencyJanuary, 2);
                }

            }
            else if (month == 2 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyFebruary = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyFebruary = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["February"] = Math.Round(KrakowfinanceteamEfficiencyFebruary, 2);
                    krakowteamTableFebruary = Math.Round(KrakowfinanceteamEfficiencyFebruary, 2);
                }
            }
            else if (month == 3 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyMarch = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyMarch = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["March"] = Math.Round(KrakowfinanceteamEfficiencyMarch, 2);
                    krakowteamTableMarch = Math.Round(KrakowfinanceteamEfficiencyMarch, 2);
                }
            }
            else if (month == 4 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyApril = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyApril = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["April"] = Math.Round(KrakowfinanceteamEfficiencyApril, 2);
                    krakowteamTableApril = Math.Round(KrakowfinanceteamEfficiencyApril, 2);
                }
            }
            else if (month == 5 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyMay = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyMay = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["May"] = Math.Round(KrakowfinanceteamEfficiencyMay, 2);
                    krakowteamTableMay = Math.Round(KrakowfinanceteamEfficiencyMay, 2);
                }
            }
            else if (month == 6 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyJune = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyJune = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["June"] = Math.Round(KrakowfinanceteamEfficiencyJune, 2);
                    krakowteamTableJune = Math.Round(KrakowfinanceteamEfficiencyJune, 2);
                }
            }
            else if (month == 7 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyJuly = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyJuly = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["July"] = Math.Round(KrakowfinanceteamEfficiencyJuly, 2);
                    krakowteamTableJuly = Math.Round(KrakowfinanceteamEfficiencyJuly, 2);
                }
            }
            else if (month == 8 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyAugust = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }
                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyAugust = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["August"] = Math.Round(KrakowfinanceteamEfficiencyAugust, 2);
                    krakowteamTableAugust = Math.Round(KrakowfinanceteamEfficiencyAugust, 2);
                }
            }
            else if (month == 9 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencySeptember = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencySeptember = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["September"] = Math.Round(KrakowfinanceteamEfficiencySeptember, 2);
                    krakowteamTableSeptember = Math.Round(KrakowfinanceteamEfficiencySeptember, 2);
                }
            }
            else if (month == 10 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyOctober = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyOctober = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["October"] = Math.Round(KrakowfinanceteamEfficiencyOctober, 2);
                    krakowteamTableOctober = Math.Round(KrakowfinanceteamEfficiencyOctober, 2);
                }
            }
            else if (month == 11 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyNovember = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyNovember = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["November"] = Math.Round(KrakowfinanceteamEfficiencyNovember, 2);
                    krakowteamTableNovember = Math.Round(KrakowfinanceteamEfficiencyNovember, 2);
                }
            }
            else if (month == 12 && krakowfinanceteamEfficiencyByMonth.Count() > 0)
            {
                krakowfinanceteamEfficiencyDecember = krakowfinanceteamEfficiencyByMonth;

                foreach (var data in krakowfinanceteamEfficiencyByMonth)
                {
                    if (data.Approval14 != "N/A")
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate14.Value).Days);
                    }
                    else
                    {
                        average.Add((data.ProcesslevelDate15.Value - data.ProcesslevelDate12.Value).Days);
                    }
                }

                if (average.Count() > 0)
                {
                    double KrakowfinanceteamEfficiencyDecember = (double)average.Sum() / average.Count();
                    krakowfinanceteamEfficiency["December"] = Math.Round(KrakowfinanceteamEfficiencyDecember, 2);
                    krakowteamTableDecember = Math.Round(KrakowfinanceteamEfficiencyDecember, 2);
                }
            }
        }
    }

}


